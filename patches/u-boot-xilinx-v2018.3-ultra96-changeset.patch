From 58a0822b84af8059c862e0c3dc9e81f64393df8c Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Fri, 23 Nov 2018 21:13:05 +0100
Subject: [PATCH 1/5] Make uio driver modular

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm64/configs/xilinx_zynqmp_defconfig | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/arch/arm64/configs/xilinx_zynqmp_defconfig b/arch/arm64/configs/xilinx_zynqmp_defconfig
index 630243b86394..dba0d479ca5d 100644
--- a/arch/arm64/configs/xilinx_zynqmp_defconfig
+++ b/arch/arm64/configs/xilinx_zynqmp_defconfig
@@ -315,7 +315,7 @@ CONFIG_XILINX_DMA_ENGINES=y
 CONFIG_XILINX_DMA=y
 CONFIG_XILINX_ZYNQMP_DMA=y
 CONFIG_DMATEST=y
-CONFIG_UIO=y
+CONFIG_UIO=m
 CONFIG_UIO_PDRV_GENIRQ=m
 CONFIG_UIO_DMEM_GENIRQ=m
 CONFIG_UIO_XILINX_APM=y
-- 
2.17.1


From c97e0d051e742a5d183a40fd338e80e72c1f8894 Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Thu, 6 Dec 2018 20:22:05 +0100
Subject: [PATCH 2/5] Enable penguin boot logo

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm64/configs/xilinx_zynqmp_defconfig | 1 +
 1 file changed, 1 insertion(+)

diff --git a/arch/arm64/configs/xilinx_zynqmp_defconfig b/arch/arm64/configs/xilinx_zynqmp_defconfig
index dba0d479ca5d..9ce9ef73e51a 100644
--- a/arch/arm64/configs/xilinx_zynqmp_defconfig
+++ b/arch/arm64/configs/xilinx_zynqmp_defconfig
@@ -383,3 +383,4 @@ CONFIG_CRYPTO_CRCT10DIF=y
 CONFIG_LOCALVERSION_AUTO=n
 CONFIG_OF=y
 CONFIG_INOTIFY_USER=y
+CONFIG_LOGO=y
-- 
2.17.1


From f09bb63ebd0a2a3c92ea9f380dfb8f20a72f6f67 Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Mon, 10 Dec 2018 00:01:51 +0100
Subject: [PATCH 3/5] Enable usb audio

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm64/configs/xilinx_zynqmp_defconfig | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/arch/arm64/configs/xilinx_zynqmp_defconfig b/arch/arm64/configs/xilinx_zynqmp_defconfig
index 9ce9ef73e51a..bb09dbafed5a 100644
--- a/arch/arm64/configs/xilinx_zynqmp_defconfig
+++ b/arch/arm64/configs/xilinx_zynqmp_defconfig
@@ -267,6 +267,12 @@ CONFIG_FB_XILINX=y
 CONFIG_FRAMEBUFFER_CONSOLE=y
 CONFIG_SOUND=y
 CONFIG_SND=y
+CONFIG_USB_AUDIO=y
+CONFIG_USB_GADGET=y
+CONFIG_SND_USB_AUDIO=y
+CONFIG_SND_SOC=y
+CONFIG_SND_SOC_I2C_AND_SPI=y
+CONFIG_SND_SOC_PCM5102A=y
 # CONFIG_SND_DRIVERS is not set
 # CONFIG_SND_PCI is not set
 CONFIG_SND_SOC=y
-- 
2.17.1


From 370616a8c33d681ea8ec70eb31930872cf823c14 Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Wed, 19 Dec 2018 06:31:31 +0100
Subject: [PATCH 4/5] Ultra96: Add Hsynth midi in driver

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm64/configs/xilinx_zynqmp_defconfig |  26 +-
 sound/soc/Kconfig                          |   1 +
 sound/soc/Makefile                         |   1 +
 sound/soc/codecs/Kconfig                   |   6 +
 sound/soc/codecs/Makefile                  |   2 +
 sound/soc/codecs/hsynth7002.c              | 114 ++++++++
 sound/soc/socsynth/Kconfig                 |   3 +
 sound/soc/socsynth/Makefile                |   2 +
 sound/soc/socsynth/hsynth-midi.c           | 296 +++++++++++++++++++++
 9 files changed, 449 insertions(+), 2 deletions(-)
 create mode 100644 sound/soc/codecs/hsynth7002.c
 create mode 100644 sound/soc/socsynth/Kconfig
 create mode 100644 sound/soc/socsynth/Makefile
 create mode 100644 sound/soc/socsynth/hsynth-midi.c

diff --git a/arch/arm64/configs/xilinx_zynqmp_defconfig b/arch/arm64/configs/xilinx_zynqmp_defconfig
index bb09dbafed5a..9f029b262891 100644
--- a/arch/arm64/configs/xilinx_zynqmp_defconfig
+++ b/arch/arm64/configs/xilinx_zynqmp_defconfig
@@ -273,9 +273,30 @@ CONFIG_SND_USB_AUDIO=y
 CONFIG_SND_SOC=y
 CONFIG_SND_SOC_I2C_AND_SPI=y
 CONFIG_SND_SOC_PCM5102A=y
-# CONFIG_SND_DRIVERS is not set
+CONFIG_SND_VIRMIDI=m
+CONFIG_SND_ALOOP=y
+CONFIG_SND_TIMER=y
+CONFIG_SND_PCM=y
+CONFIG_SND_HWDEP=y
+CONFIG_SND_RAWMIDI=m
+CONFIG_SND_COMPRESS_OFFLOAD=y
+CONFIG_SND_JACK=y
+CONFIG_SND_SEQUENCER=y
+CONFIG_SND_SEQ_DUMMY=y
+CONFIG_SND_OSSEMUL=y
+CONFIG_SND_SEQUENCER_OSS=y
+CONFIG_SND_SUPPORT_OLD_API=y
+CONFIG_SND_VERBOSE_PROCFS=y
+CONFIG_SND_VERBOSE_PRINTK=y
+CONFIG_SND_DEBUG=y
+CONFIG_SND_DEBUG_VERBOSE=y
+CONFIG_SND_DMA_SGBUF=y
+CONFIG_SND_DRIVERS=y
+CONFIG_SND_DUMMY=y
+CONFIG_SND_SERIAL_U16550=y
+CONFIG_SND_SPI=y
+CONFIG_SND_USB=y
 # CONFIG_SND_PCI is not set
-CONFIG_SND_SOC=y
 CONFIG_SND_SOC_XILINX_DP=y
 CONFIG_USB=y
 CONFIG_USB_ANNOUNCE_NEW_DEVICES=y
@@ -390,3 +411,4 @@ CONFIG_LOCALVERSION_AUTO=n
 CONFIG_OF=y
 CONFIG_INOTIFY_USER=y
 CONFIG_LOGO=y
+CONFIG_SND_SOC_HSYNTH_MIDI=y
diff --git a/sound/soc/Kconfig b/sound/soc/Kconfig
index ad4e723f8b26..f4144f0a2b30 100644
--- a/sound/soc/Kconfig
+++ b/sound/soc/Kconfig
@@ -63,6 +63,7 @@ source "sound/soc/samsung/Kconfig"
 source "sound/soc/sh/Kconfig"
 source "sound/soc/sirf/Kconfig"
 source "sound/soc/spear/Kconfig"
+source "sound/soc/socsynth/Kconfig"
 source "sound/soc/sti/Kconfig"
 source "sound/soc/stm/Kconfig"
 source "sound/soc/sunxi/Kconfig"
diff --git a/sound/soc/Makefile b/sound/soc/Makefile
index e5bd43223684..0df7fb146954 100644
--- a/sound/soc/Makefile
+++ b/sound/soc/Makefile
@@ -44,6 +44,7 @@ obj-$(CONFIG_SND_SOC)	+= samsung/
 obj-$(CONFIG_SND_SOC)	+= sh/
 obj-$(CONFIG_SND_SOC)	+= sirf/
 obj-$(CONFIG_SND_SOC)	+= spear/
+obj-$(CONFIG_SND_SOC)	+= socsynth/
 obj-$(CONFIG_SND_SOC)	+= sti/
 obj-$(CONFIG_SND_SOC)	+= stm/
 obj-$(CONFIG_SND_SOC)	+= sunxi/
diff --git a/sound/soc/codecs/Kconfig b/sound/soc/codecs/Kconfig
index c367d11079bc..6894da582113 100644
--- a/sound/soc/codecs/Kconfig
+++ b/sound/soc/codecs/Kconfig
@@ -79,6 +79,7 @@ config SND_SOC_ALL_CODECS
 	select SND_SOC_ES7134
 	select SND_SOC_GTM601
 	select SND_SOC_HDAC_HDMI
+	select SND_SOC_HSYNTH7002
 	select SND_SOC_ICS43432
 	select SND_SOC_INNO_RK3036
 	select SND_SOC_ISABELLE if I2C
@@ -577,6 +578,11 @@ config SND_SOC_HDAC_HDMI
 	select SND_HDA_EXT_CORE
 	select SND_PCM_ELD
 	select HDMI
+ 
+config SND_SOC_HSYNTH7002
+	tristate "Dummy Soc synthesizer codec-driver driver"
+
+
 
 config SND_SOC_ICS43432
 	tristate
diff --git a/sound/soc/codecs/Makefile b/sound/soc/codecs/Makefile
index 05018b7ca72b..e8e14f80b56b 100644
--- a/sound/soc/codecs/Makefile
+++ b/sound/soc/codecs/Makefile
@@ -73,6 +73,7 @@ snd-soc-es8328-i2c-objs := es8328-i2c.o
 snd-soc-es8328-spi-objs := es8328-spi.o
 snd-soc-gtm601-objs := gtm601.o
 snd-soc-hdac-hdmi-objs := hdac_hdmi.o
+snd-soc-hsynth7002-objs := hsynth7002.o
 snd-soc-ics43432-objs := ics43432.o
 snd-soc-inno-rk3036-objs := inno_rk3036.o
 snd-soc-isabelle-objs := isabelle.o
@@ -313,6 +314,7 @@ obj-$(CONFIG_SND_SOC_ES8328_I2C)+= snd-soc-es8328-i2c.o
 obj-$(CONFIG_SND_SOC_ES8328_SPI)+= snd-soc-es8328-spi.o
 obj-$(CONFIG_SND_SOC_GTM601)    += snd-soc-gtm601.o
 obj-$(CONFIG_SND_SOC_HDAC_HDMI) += snd-soc-hdac-hdmi.o
+obj-$(CONFIG_SND_SOC_HSYNTH7002)+= snd-soc-hsynth7002.o
 obj-$(CONFIG_SND_SOC_ICS43432)	+= snd-soc-ics43432.o
 obj-$(CONFIG_SND_SOC_INNO_RK3036)	+= snd-soc-inno-rk3036.o
 obj-$(CONFIG_SND_SOC_ISABELLE)	+= snd-soc-isabelle.o
diff --git a/sound/soc/codecs/hsynth7002.c b/sound/soc/codecs/hsynth7002.c
new file mode 100644
index 000000000000..6a7fd5ab23f1
--- /dev/null
+++ b/sound/soc/codecs/hsynth7002.c
@@ -0,0 +1,114 @@
+/*
+ * HSYNTH7002 Soc Synthesizer dummy codec driver
+ *
+ * Copyright 2017 Holotronic
+ *  Michael Brown (the-snowwhite) <producer@holotronic.dk>
+ *  based on hsynth7002.c
+ *
+ * Licensed under the GPL-2.
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+
+#include <sound/soc.h>
+
+static const struct snd_soc_dapm_widget hsynth7002_widgets[] = {
+	SND_SOC_DAPM_INPUT("HSYNTH"),
+//	SND_SOC_DAPM_REGULATOR_SUPPLY("IOVDD", 0, 0),
+};
+
+static const struct snd_soc_dapm_route hsynth7002_routes[] = {
+	{ "Capture", NULL, "HSYNTH" },
+//	{ "Capture", NULL, "IOVDD" },
+};
+
+static int hsynth7002_set_dai_fmt(struct snd_soc_dai *dai, unsigned int fmt)
+{
+	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
+	case SND_SOC_DAIFMT_CBS_CFS:
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	switch (fmt & SND_SOC_DAIFMT_INV_MASK) {
+	case SND_SOC_DAIFMT_NB_NF:
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	switch (fmt & SND_SOC_DAIFMT_FORMAT_MASK) {
+	case SND_SOC_DAIFMT_I2S:
+	case SND_SOC_DAIFMT_DSP_A:
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static const struct snd_soc_dai_ops hsynth7002_dai_ops = {
+	.set_fmt = hsynth7002_set_dai_fmt,
+};
+
+static struct snd_soc_dai_driver hsynth7002_dai = {
+	.name = "hsynth7002-hifi",
+	.capture = {
+		.stream_name = "Capture",
+		.channels_min = 2,
+		.channels_max = 2,
+		.rates = SNDRV_PCM_RATE_8000_96000,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S20_3LE |
+		SNDRV_PCM_FMTBIT_S24_LE | SNDRV_PCM_FMTBIT_S32_LE,
+		.sig_bits = 20,
+	},
+	.ops = &hsynth7002_dai_ops,
+};
+
+static const struct snd_soc_codec_driver hsynth7002_codec_driver = {
+	.component_driver = {
+		.dapm_widgets = hsynth7002_widgets,
+		.num_dapm_widgets = ARRAY_SIZE(hsynth7002_widgets),
+		.dapm_routes = hsynth7002_routes,
+		.num_dapm_routes = ARRAY_SIZE(hsynth7002_routes),
+	},
+};
+
+static int hsynth7002_probe(struct platform_device *pdev)
+{
+	return snd_soc_register_codec(&pdev->dev, &hsynth7002_codec_driver,
+			&hsynth7002_dai, 1);
+}
+
+static int hsynth7002_remove(struct platform_device *pdev)
+{
+	snd_soc_unregister_codec(&pdev->dev);
+	return 0;
+}
+
+//#ifdef CONFIG_OF
+static const struct of_device_id hsynth7002_dt_ids[] = {
+	{ .compatible = "holotr,hsynth7002", },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, hsynth7002_dt_ids);
+//#endif
+
+static struct platform_driver hsynth7002_driver = {
+	.driver = {
+		.name = "hsynth7002",
+		.of_match_table	= of_match_ptr(hsynth7002_dt_ids),
+	},
+	.probe = hsynth7002_probe,
+	.remove = hsynth7002_remove,
+};
+module_platform_driver(hsynth7002_driver);
+
+MODULE_AUTHOR("Michael Brown <producer@holotronic.dk>");
+MODULE_DESCRIPTION("HSYNTH7002 Dummy Soc synthesizer codec-driver driver");
+MODULE_LICENSE("GPL v2");
diff --git a/sound/soc/socsynth/Kconfig b/sound/soc/socsynth/Kconfig
new file mode 100644
index 000000000000..98dada5c255e
--- /dev/null
+++ b/sound/soc/socsynth/Kconfig
@@ -0,0 +1,3 @@
+config SND_SOC_HSYNTH_MIDI
+       tristate "Holosynth MIDI support"
+
diff --git a/sound/soc/socsynth/Makefile b/sound/soc/socsynth/Makefile
new file mode 100644
index 000000000000..126f34202ac8
--- /dev/null
+++ b/sound/soc/socsynth/Makefile
@@ -0,0 +1,2 @@
+snd-soc-hsynth-midi-objs := hsynth-midi.o
+obj-$(CONFIG_SND_SOC_HSYNTH_MIDI) += snd-soc-hsynth-midi.o
diff --git a/sound/soc/socsynth/hsynth-midi.c b/sound/soc/socsynth/hsynth-midi.c
new file mode 100644
index 000000000000..364a16b86ef2
--- /dev/null
+++ b/sound/soc/socsynth/hsynth-midi.c
@@ -0,0 +1,296 @@
+/*
+* hsynth-soc -- SoC audio ( midi for Altera SoC boards
+* Author: Michael Brown the-snowwhite <producer@holotronic.dk>
+*
+* Based on de1-soc-wm8731 by
+*  B. Steinsbo <bsteinsbo@gmail.com>
+*
+* Licensed under the GPL-2.
+*/
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/clk.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/uaccess.h>
+#include <linux/ioport.h>
+#include <linux/io.h>
+
+#include <sound/core.h>
+#include <sound/seq_kernel.h>
+#include <sound/rawmidi.h>
+#include <sound/initval.h>
+// #include <sound/pcm.h>
+// #include <sound/pcm_params.h>
+#include <sound/soc.h>
+
+#define SYNTHSOCSOUND_LOG_PREFIX "synthsound: "
+
+#define midi_ins 0
+#define midi_outs 1
+
+#define MIDIREG_BASE 0xA0000000
+#define MIDIREG_SIZE PAGE_SIZE
+#define MIDIREG_OFFSET 0x0000
+
+#define printe(...) pr_err(SYNTHSOCSOUND_LOG_PREFIX __VA_ARGS__)
+
+static int snd_socmidi_open(struct snd_rawmidi_substream *substream);
+static int snd_socmidi_close(struct snd_rawmidi_substream *substream);
+static int hmidi_card_probe(struct snd_soc_card *card);
+static int hmidi_card_remove(struct snd_soc_card *card);
+static void snd_socmidi_transmit(unsigned char data);
+static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int);
+static int hsound_midi_init(struct snd_card *card);
+
+void *midireg_mem;
+
+static int snd_socmidi_open(struct snd_rawmidi_substream *substream)
+{
+    return 0;
+}
+
+static int snd_socmidi_close(struct snd_rawmidi_substream *substream)
+{
+    return 0;
+}
+
+static int hmidi_card_probe(struct snd_soc_card *card)
+{
+    int err;
+
+    err = hsound_midi_init(card->snd_card);
+
+    if (err < 0) {
+//		dev_dbg(&pdev->dev,"hsound_midi_init failed: %d\n", err);
+        return err;
+    }
+
+    return 0;
+}
+
+static int hmidi_card_remove(struct snd_soc_card *card)
+{
+    return 0;
+}
+
+static void snd_socmidi_transmit(unsigned char data){
+
+    iowrite8(data, midireg_mem);
+
+}
+
+static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int up) {
+
+    if (!up)
+        return;
+
+    while (1) {
+        unsigned char data;
+        if (snd_rawmidi_transmit(substream, &data, 1) != 1)
+            break; /* no more data */
+        snd_socmidi_transmit(data);
+    }
+}
+
+static struct snd_rawmidi *g_rmidi;
+
+static struct snd_rawmidi_ops snd_socmidi_output_ops = {
+    .open = snd_socmidi_open,
+    .close = snd_socmidi_close,
+    .trigger = snd_socmidi_output_trigger,
+};
+
+static void pisnd_get_port_info(struct snd_rawmidi *rmidi, int number, struct snd_seq_port_info *seq_port_info)
+{
+    seq_port_info->type =
+        SNDRV_SEQ_PORT_TYPE_MIDI_GENERIC |
+        SNDRV_SEQ_PORT_TYPE_HARDWARE |
+        SNDRV_SEQ_PORT_TYPE_PORT;
+    seq_port_info->midi_voices = 0;
+}
+
+static struct snd_rawmidi_global_ops hsnd_global_ops = {.get_port_info = pisnd_get_port_info, };
+
+static int hsound_midi_init(struct snd_card *card)
+{
+    int err;
+struct resource *res;
+
+    err = snd_rawmidi_new(card, "SocMIDI", 0, midi_outs, midi_ins, &g_rmidi);
+
+    if (err < 0) {
+        printe("snd_rawmidi_new failed: %d\n", err);
+        return err;
+    }
+
+    strcpy(g_rmidi->name, "Holosynth MIDI ");
+//	strcat(g_rmidi->name, pisnd_spi_get_serial());
+
+    g_rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT;
+    // rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT |
+    //                     SNDRV_RAWMIDI_INFO_INPUT |
+    //                     SNDRV_RAWMIDI_INFO_DUPLEX;
+
+    g_rmidi->ops = &hsnd_global_ops;
+
+    g_rmidi->private_data = (void *)0;
+
+    snd_rawmidi_set_ops(g_rmidi, SNDRV_RAWMIDI_STREAM_OUTPUT, &snd_socmidi_output_ops);
+//    snd_rawmidi_set_ops(rmidi, SNDRV_RAWMIDI_STREAM_INPUT, &snd_socmidi_input_ops);
+
+    res = request_mem_region((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE, "MIDIREG");
+    if (res == NULL) {
+        return -EBUSY;
+    }
+
+    midireg_mem = ioremap((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE);
+    if (midireg_mem == NULL) {
+        release_mem_region(MIDIREG_BASE, MIDIREG_SIZE);
+        return -EFAULT;
+    }
+
+    return 0;
+}
+
+/*
+static const struct snd_soc_dapm_widget soc_dapm_widgets[] = {
+    SND_SOC_DAPM_LINE("Hsynth in", NULL),
+};
+
+static const struct snd_soc_dapm_route intercon[] = {
+    {"PDM_DAT", NULL, "Hsynth in"},
+//	{"Mic Bias", NULL, "Microphone Jack"},
+//	{"LLINEIN", NULL, "Line In Jack"},
+//	{"RLINEIN", NULL, "Line In Jack"},
+//	{"Line Out Jack", NULL, "LOUT"},
+//	{"Line Out Jack", NULL, "ROUT"},
+//	{"Headphone Jack", NULL, "LHPOUT"},
+//	{"Headphone Jack", NULL, "RHPOUT"},
+};
+
+static int soc_hsynth_init(struct snd_soc_pcm_runtime *rtd)
+{
+//	struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+    struct device *dev = rtd->card->dev;
+    unsigned int fmt;
+    int ret;
+
+    dev_dbg(dev, "init\n");
+
+    fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+        SND_SOC_DAIFMT_CBS_CFS;
+
+    // set cpu DAI configuration
+    ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
+    if (ret < 0)
+        return ret;
+
+
+    return 0;
+}
+
+static struct snd_soc_dai_link hsynth_soc_dai = {
+    .name = "HSYNTH",
+    .stream_name = "HSYNTH PCM",
+    .cpu_dai_name = "ff200000.dmalink",
+    .codec_dai_name = "hsynth7002-hifi",
+    .init = soc_hsynth_init,
+    .platform_name = "socsynth",
+    .codec_name = "hsynth7002.hsynth",
+//	.ops = &hsynth_soc_ops,
+};
+*/
+static struct snd_soc_card snd_soc_hsynth_soc = {
+    .name = "HSYNTH-MIDI",
+    .owner = THIS_MODULE,
+//     .dai_link = &hsynth_soc_dai,
+//     .num_links = 1,
+
+    .probe        = hmidi_card_probe,
+    .remove       = hmidi_card_remove,
+
+//    .dapm_widgets = soc_dapm_widgets,
+//    .num_dapm_widgets = ARRAY_SIZE(soc_dapm_widgets),
+//    .dapm_routes = intercon,
+//    .num_dapm_routes = ARRAY_SIZE(intercon),
+};
+
+static int hsynth_soc_audio_probe(struct platform_device *pdev)
+{
+//         struct device_node *np = pdev->dev.of_node;
+//     struct device_node *codec_np, *cpu_np;
+    struct snd_soc_card *card = &snd_soc_hsynth_soc;
+    int ret;
+//
+//     if (!np) {
+//         return -ENODEV;
+//     }
+//
+    card->dev = &pdev->dev;
+//
+//
+//     /* Parse codec info */
+//     hsynth_soc_dai.codec_name = NULL;
+//     codec_np = of_parse_phandle(np, "audio-codec", 0);
+//     if (!codec_np) {
+//         dev_err(&pdev->dev, "codec info missing\n");
+//         return -EINVAL;
+//     }
+//     hsynth_soc_dai.codec_of_node = codec_np;
+//
+//     /* Parse dai and platform info */
+//     hsynth_soc_dai.cpu_dai_name = NULL;
+//     hsynth_soc_dai.platform_name = NULL;
+//     cpu_np = of_parse_phandle(np, "dmalink-controller", 0);
+//     if (!cpu_np) {
+//         dev_err(&pdev->dev, "dai and pcm info missing\n");
+//         return -EINVAL;
+//     }
+//     hsynth_soc_dai.cpu_of_node = cpu_np;
+//     hsynth_soc_dai.platform_of_node = cpu_np;
+//
+//     of_node_put(codec_np);
+//     of_node_put(cpu_np);
+//
+    ret = snd_soc_register_card(card);
+    if (ret) {
+        dev_err(&pdev->dev, "snd_soc_register_card() failed\n");
+    }
+
+    return ret;
+}
+
+static int soc_audio_remove(struct platform_device *pdev)
+{
+    struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+     snd_soc_unregister_card(card);
+
+    return 0;
+}
+
+static const struct of_device_id soc_hsynth_dt_ids[] = {
+    { .compatible = "holotr,socsynth-midi", },
+    { }
+};
+MODULE_DEVICE_TABLE(of, soc_hsynth_dt_ids);
+
+static struct platform_driver soc_audio_driver = {
+    .driver = {
+        .name	= "soc-synth-midi",
+        .owner	= THIS_MODULE,
+        .of_match_table = of_match_ptr(soc_hsynth_dt_ids),
+    },
+    .probe	= hsynth_soc_audio_probe,
+    .remove	= soc_audio_remove,
+};
+
+module_platform_driver(soc_audio_driver);
+
+/* Module information */
+MODULE_AUTHOR("Michael Brown (the-snowwhite) <producer@holotronic.dk>");
+MODULE_DESCRIPTION("ALSA SoC HSYNTH-MIDI");
+MODULE_LICENSE("GPL");
-- 
2.17.1


From d757ae16fbde67f624ece4ee9f3cc787cd2281fe Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Mon, 7 Jan 2019 17:35:18 +0100
Subject: [PATCH 5/5] Ultra96: Mod midi driver to convert running status to non

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 sound/soc/socsynth/hsynth-midi.c | 16 ++++++++++++++--
 1 file changed, 14 insertions(+), 2 deletions(-)

diff --git a/sound/soc/socsynth/hsynth-midi.c b/sound/soc/socsynth/hsynth-midi.c
index 364a16b86ef2..28a58a362def 100644
--- a/sound/soc/socsynth/hsynth-midi.c
+++ b/sound/soc/socsynth/hsynth-midi.c
@@ -76,8 +76,20 @@ static int hmidi_card_remove(struct snd_soc_card *card)
 }
 
 static void snd_socmidi_transmit(unsigned char data){
-
-    iowrite8(data, midireg_mem);
+    int count;
+    unsigned char curr_status;
+    if (data >= 128) {
+        count = 0;
+        curr_status = data;
+    } else {
+        count = count + 1;
+    }
+    if (count >= 3 && (count & 1)){
+        iowrite8(curr_status, midireg_mem);
+        iowrite8(data, midireg_mem);
+    } else {
+        iowrite8(data, midireg_mem);
+    }
 
 }
 
-- 
2.17.1

