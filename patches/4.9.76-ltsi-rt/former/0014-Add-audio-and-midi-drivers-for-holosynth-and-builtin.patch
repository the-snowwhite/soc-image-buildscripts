From ca4835c1d3ff31515598b5d263ba60241aee7bea Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Sun, 8 Apr 2018 22:39:54 +0200
Subject: [PATCH 14/33] Add audio and midi drivers for holosynth and builtin
 audio codec on de1 board

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm/boot/dts/Makefile                    |   1 +
 .../arm/boot/dts/socfpga_cyclone5_de1_soc.dts | 285 +++++++++++
 arch/arm/configs/socfpga_defconfig            |  64 ++-
 sound/soc/Kconfig                             |   3 +-
 sound/soc/Makefile                            |   1 +
 sound/soc/codecs/Kconfig                      |   5 +
 sound/soc/codecs/Makefile                     |   2 +
 sound/soc/codecs/hsynth7002.c                 | 115 +++++
 sound/soc/socsynth/Kconfig                    |  31 ++
 sound/soc/socsynth/Makefile                   |  11 +
 sound/soc/socsynth/de1-soc-wm8731-hsynth.c    | 458 ++++++++++++++++++
 sound/soc/socsynth/hsynth-midi.c              | 296 +++++++++++
 sound/soc/socsynth/hsynthdma.c                | 418 ++++++++++++++++
 sound/soc/socsynth/opencores_i2s.c            | 436 +++++++++++++++++
 14 files changed, 2122 insertions(+), 4 deletions(-)
 create mode 100644 arch/arm/boot/dts/socfpga_cyclone5_de1_soc.dts
 create mode 100644 sound/soc/codecs/hsynth7002.c
 create mode 100644 sound/soc/socsynth/Kconfig
 create mode 100644 sound/soc/socsynth/Makefile
 create mode 100644 sound/soc/socsynth/de1-soc-wm8731-hsynth.c
 create mode 100644 sound/soc/socsynth/hsynth-midi.c
 create mode 100644 sound/soc/socsynth/hsynthdma.c
 create mode 100644 sound/soc/socsynth/opencores_i2s.c

diff --git a/arch/arm/boot/dts/Makefile b/arch/arm/boot/dts/Makefile
index 24fc153474bb..3ddb76dff383 100644
--- a/arch/arm/boot/dts/Makefile
+++ b/arch/arm/boot/dts/Makefile
@@ -703,6 +703,7 @@ dtb-$(CONFIG_ARCH_SOCFPGA) += \
 	socfpga_cyclone5_de10_nano_uio_fb.dtb \
 	socfpga_cyclone5_de10_nano_uio_fb_hd.dtb \
 	socfpga_cyclone5_de10_nano.dtb \
+	socfpga_cyclone5_de1_soc.dtb \
 	socfpga_cyclone5_sockit.dtb \
 	socfpga_cyclone5_socrates.dtb \
 	socfpga_cyclone5_sodia.dtb \
diff --git a/arch/arm/boot/dts/socfpga_cyclone5_de1_soc.dts b/arch/arm/boot/dts/socfpga_cyclone5_de1_soc.dts
new file mode 100644
index 000000000000..d2b80e6d9044
--- /dev/null
+++ b/arch/arm/boot/dts/socfpga_cyclone5_de1_soc.dts
@@ -0,0 +1,285 @@
+/*
+* Copyright Intel Corporation (C) 2017. All rights reserved.
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms and conditions of the GNU General Public License,
+* version 2, as published by the Free Software Foundation.
+*
+* This program is distributed in the hope it will be useful, but WITHOUT
+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+* more details.
+*
+* You should have received a copy of the GNU General Public License along with
+* this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "socfpga_cyclone5.dtsi"
+
+/ {
+	model = "Terasic DE1-SoC";
+	compatible = "altr,socfpga-cyclone5", "altr,socfpga";
+
+	chosen {
+		bootargs = "earlyprintk";
+		stdout-path = "serial0:115200n8";
+	};
+
+	memory {
+		name = "memory";
+		device_type = "memory";
+		reg = <0x0 0x40000000>; /* 1GB */
+	};
+
+	aliases {
+		ethernet0 = &gmac1;
+	};
+
+	regulator_3_3v: 3-3-v-regulator {
+		compatible = "regulator-fixed";
+		regulator-name = "3.3V";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+	};
+
+	leds {
+		compatible = "gpio-leds";
+		hps0 {
+			label = "hps_led0";
+			gpios = <&portb 24 0>;
+			linux,default-trigger = "heartbeat";
+		};
+	};
+
+	keys {
+		compatible = "gpio-keys";
+		hps0 {
+			label = "hps_key0";
+			gpios = <&portb 25 0>;
+			linux,code = <63>;
+			debounce-interval = <50>;
+		};
+	};
+
+	sound {
+		compatible = "opencores,de1soc-wm8731-audio-midi";
+		i2s-controller = <&i2s>;
+		audio-codec = <&wm8731>;
+		i2c-mux-gpio = <&portb 19 0>;
+		dmalink-controller = <&dmalink>;
+		synth-codec = <&hsynth7002_codec>;
+	};
+
+	clk48: clk48 {
+		compatible = "fixed-clock";
+		#clock-cells = <0>;
+		clock-frequency  = <24576000>;
+		clock-output-names = "clk48";
+	};
+
+	clk44: clk44 {
+		compatible = "fixed-clock";
+		#clock-cells = <0>;
+		clock-frequency  = <33868800>;
+		clock-output-names = "clk44";
+	};
+
+	i2s: i2s@0x0 {
+		#sound-dai-cells = <1>;
+		compatible = "opencores,i2s";
+		reg = <0xff200000 0x20>, <0xff200040 0x20>;
+		clocks = <&clk44>, <&clk48>;
+		clock-names = "clk44", "clk48";
+		dmas = <&pdma 0>, <&pdma 1>, <&pdma 2>;
+		dma-names = "tx", "rx", "rx";
+	};
+
+	dmalink: dmalink@0x20 {
+		#sound-dai-cells = <1>;
+		compatible = "holotr,dmalink";
+		reg = <0xff200020 0x20>, <0xff200060 0x20>;
+		clocks = <&clk44>;
+		clock-names = "clk44";
+		dmas = <&pdma 2>;
+		dma-names = "rx";
+	};
+
+	hsynth7002_codec: hsynth7002-codec {
+	#sound-dai-cells = <0>;
+		compatible = "holotr,hsynth7002";
+/*     IOVDD-supply = <&supply>;*/
+		status = "okay";
+	};
+
+	bridge@0xc0000000 {
+		compatible = "altr,bridge-15.1", "simple-bus";
+		reg = <0xc0000000 0x20000000 0xff200000 0x200000>;
+		bridge-enable = <1>;
+		#address-cells = <0x2>;
+		#size-cells = <0x1>;
+		ranges = <0x00000001 0x00020000 0xff220000 0x00000008>,
+			<0x00000001 0x00031000 0xff231000 0x00000080>,
+			<0x00000001 0x00010000 0xff210000 0x00000008>,
+			<0x00000001 0x000100c0 0xff2100c0 0x00000010>,
+			<0x00000001 0x00010080 0xff210080 0x00000010>,
+			<0x00000001 0x00010040 0xff210040 0x00000010>,
+			<0x00000001 0x00040000 0xff240000 0x00010000>,
+			<0x00000001 0x00050000 0xff250000 0x00010000>;
+
+		serial@0x100020000 {
+			compatible = "altr,juart-17.1", "altr,juart-1.0";
+			reg = <0x00000001 0x00020000 0x00000008>;
+			interrupt-parent = <0x2>;
+			interrupts = <0 40 4>;
+			clocks = <0x2>;
+		}; //end serial@0x100020000 (jtag_uart)
+
+		vip@0x100031000 {
+			compatible = "altr,vip-frame-reader-1.0", "ALTR,vip-frame-reader-14.0";
+			reg = <0x00000001 0x00031000 0x00000080>;
+			max-width = <0x556>;
+			max-height = <0x300>;
+			bits-per-color = <0x8>;
+			colors-per-beat = <0x4>;
+			beats-per-pixel = <0x1>;
+			mem-word-width = <0x80>;
+		};
+
+		sysid@0x100010000 {
+			compatible = "altr,sysid-15.1", "altr,sysid-1.0";
+			reg = <0x00000001 0x00010000 0x00000008>;
+			id = <2899645186>;
+			timestamp = <1524157570>;
+		};
+
+		gpio@0x1000100c0 {
+			compatible = "altr,pio-17.1", "altr,pio-1.0";
+			reg = <0x00000001 0x000100c0 0x00000010>;
+			interrupt-parent = <0x2>;
+			interrupts = <0 41 1>;
+			clocks = <0x2>;
+			altr,gpio-bank-width = <2>;	/* embeddedsw.dts.params.altr,gpio-bank-width type NUMBER */
+			altr,interrupt-type = <2>;	/* embeddedsw.dts.params.altr,interrupt-type type NUMBER */
+			altr,interrupt_type = <2>;	/* embeddedsw.dts.params.altr,interrupt_type type NUMBER */
+			edge_type = <1>;	/* embeddedsw.dts.params.edge_type type NUMBER */
+			level_trigger = <0>;	/* embeddedsw.dts.params.level_trigger type NUMBER */
+			resetvalue = <0>;	/* embeddedsw.dts.params.resetvalue type NUMBER */
+			#gpio-cells = <2>;
+			gpio-controller;
+		}; //end gpio@0x1000100c0 (button_pio)
+
+		gpio@0x100010080 {
+			compatible = "altr,pio-17.1", "altr,pio-1.0";
+			reg = <0x00000001 0x00010080 0x00000010>;
+			interrupt-parent = <0x2>;
+			interrupts = <0 42 1>;
+			clocks = <0x2>;
+			altr,gpio-bank-width = <10>;	/* embeddedsw.dts.params.altr,gpio-bank-width type NUMBER */
+			altr,interrupt-type = <3>;	/* embeddedsw.dts.params.altr,interrupt-type type NUMBER */
+			altr,interrupt_type = <3>;	/* embeddedsw.dts.params.altr,interrupt_type type NUMBER */
+			edge_type = <2>;	/* embeddedsw.dts.params.edge_type type NUMBER */
+			level_trigger = <0>;	/* embeddedsw.dts.params.level_trigger type NUMBER */
+			resetvalue = <0>;	/* embeddedsw.dts.params.resetvalue type NUMBER */
+			#gpio-cells = <2>;
+			gpio-controller;
+		}; //end gpio@0x100010080 (dipsw_pio)
+
+		gpio@0x100010040 {
+			compatible = "altr,pio-17.1", "altr,pio-1.0";
+			reg = <0x00000001 0x00010040 0x00000010>;
+			clocks = <0x2>;
+			altr,gpio-bank-width = <10>;	/* embeddedsw.dts.params.altr,gpio-bank-width type NUMBER */
+			resetvalue = <0>;	/* embeddedsw.dts.params.resetvalue type NUMBER */
+			#gpio-cells = <2>;
+			gpio-controller;
+		}; //end gpio@0x100010040 (led_pio)
+
+		uio-socfpg0@0x100040000 {
+			compatible = "generic-uio,ui_pdrv";
+			reg = <0x00000001 0x00040000 0x00010000>;
+			interrupt-parent = <0x2>;
+			interrupts = <0 43 4>;
+			address_width = <14>;
+			data_width = <32>;
+		};
+
+		socmidi@0x100050000 {
+			compatible = "holotr,socsynth-midi";
+			reg = <0x00000001 0x00050000 0x00010000>;
+			interrupt-parent = <0x2>;
+/*			interrupts = <0 44 4>;*/
+			address_width = <3>;   /* embeddedsw.dts.params.address_width type NUMBER */
+			data_width = <8>;      /* embeddedsw.dts.params.data_width type NUMBER */
+		};
+	};
+};
+
+&gmac1 {
+	status = "okay";
+	phy-mode = "rgmii";
+
+	txd0-skew-ps = <0>; /* -420ps */
+	txd1-skew-ps = <0>; /* -420ps */
+	txd2-skew-ps = <0>; /* -420ps */
+	txd3-skew-ps = <0>; /* -420ps */
+	rxd0-skew-ps = <420>; /* 0ps */
+	rxd1-skew-ps = <420>; /* 0ps */
+	rxd2-skew-ps = <420>; /* 0ps */
+	rxd3-skew-ps = <420>; /* 0ps */
+	txen-skew-ps = <0>; /* -420ps */
+	txc-skew-ps = <1860>; /* 960ps */
+	rxdv-skew-ps = <420>; /* 0ps */
+	rxc-skew-ps = <1680>; /* 780ps */
+
+	max-frame-size = <3800>;
+};
+
+&gpio0 {
+	status = "okay";
+};
+
+&gpio1 {
+	status = "okay";
+};
+
+&gpio2 {
+	status = "okay";
+};
+
+&i2c0 {
+	status = "okay";
+	speed-mode = <0>;
+
+	wm8731: wm8731@34 {
+		#sound-dai-cells = <0>;
+		compatible = "wlf,wm8731";
+		reg = <0x1a>;
+	};
+
+	adxl345: adxl345@0 {
+		compatible = "adi,adxl345";
+		reg = <0x53>;
+
+		interrupt-parent = <&portc>;
+		interrupts = <3 2>;
+	};
+};
+
+&i2c1 {
+	status = "okay";
+	speed-mode = <0>;
+};
+
+&mmc0 {
+	vmmc-supply = <&regulator_3_3v>;
+	vqmmc-supply = <&regulator_3_3v>;
+	status = "okay";
+};
+
+&uart0 {
+	status = "okay";
+};
+
+&usb1 {
+	status = "okay";
+};
diff --git a/arch/arm/configs/socfpga_defconfig b/arch/arm/configs/socfpga_defconfig
index cb504b62a019..d090fe7cd7c5 100644
--- a/arch/arm/configs/socfpga_defconfig
+++ b/arch/arm/configs/socfpga_defconfig
@@ -280,7 +280,6 @@ CONFIG_FB_NOTIFY=y
 CONFIG_FB_CFB_FILLRECT=y
 CONFIG_FB_CFB_COPYAREA=y
 CONFIG_FB_CFB_IMAGEBLIT=y
-CONFIG_FB_ALTERA_VIP=y
 CONFIG_DUMMY_CONSOLE=y
 CONFIG_FRAMEBUFFER_CONSOLE=y
 CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY=y
@@ -298,5 +297,64 @@ CONFIG_TOUCHSCREEN_USB_COMPOSITE=y
 CONFIG_HID=y
 CONFIG_USB_HID=y
 CONFIG_HID_MULTITOUCH=y
-#CONFIG_ALTERA_PR_IP_CORE=y
-#CONFIG_ALTERA_PR_IP_CORE_PLAT=y
+CONFIG_ALTERA_PR_IP_CORE=y
+CONFIG_ALTERA_PR_IP_CORE_PLAT=y
+CONFIG_SND_USB_AUDIO=m
+CONFIG_SND_SOC=y
+CONFIG_SND_SOC_I2C_AND_SPI=y
+CONFIG_SND_SOC_SIGMADSP=m
+CONFIG_SND_SOC_SIGMADSP_I2C=m
+CONFIG_SND_SOC_SSM2602=m
+CONFIG_SND_SOC_SSM2602_I2C=m
+CONFIG_SND_ALOOP=m
+CONFIG_SND_VIRMIDI=m
+CONFIG_SND_SOC_DE1_WM8731_HSYNTH=m
+CONFIG_SND_SOC_HSYNTH_MIDI=m
+CONFIG_SND_SOC_PCM5102A=m
+CONFIG_FPGADMA=m
+CONFIG_REGMAP_I2C=y
+CONFIG_REGMAP_SPI=y
+CONFIG_SOUND=y
+CONFIG_SOUND_OSS_CORE=y
+CONFIG_SOUND_OSS_CORE_PRECLAIM=y
+CONFIG_SND=y
+CONFIG_SND_TIMER=y
+CONFIG_SND_PCM=y
+CONFIG_SND_HWDEP=y
+CONFIG_SND_RAWMIDI=y
+CONFIG_SND_COMPRESS_OFFLOAD=y
+CONFIG_SND_JACK=y
+CONFIG_SND_SEQUENCER=y
+CONFIG_SND_SEQ_DUMMY=y
+CONFIG_SND_OSSEMUL=y
+CONFIG_SND_SEQUENCER_OSS=y
+CONFIG_SND_SUPPORT_OLD_API=y
+CONFIG_SND_VERBOSE_PROCFS=y
+CONFIG_SND_VERBOSE_PRINTK=y
+CONFIG_SND_DEBUG=y
+CONFIG_SND_DEBUG_VERBOSE=y
+CONFIG_SND_DMA_SGBUF=y
+CONFIG_SND_DRIVERS=y
+CONFIG_SND_DUMMY=m
+CONFIG_SND_SERIAL_U16550=m
+CONFIG_SND_SPI=y
+CONFIG_SND_USB=y
+CONFIG_I2C_BOARDINFO=y
+CONFIG_I2C_COMPAT=y
+CONFIG_I2C_HELPER_AUTO=y
+CONFIG_I2C_DESIGNWARE_CORE=y
+CONFIG_I2C_OCORES=y
+CONFIG_REGULATOR_DEBUG=y
+CONFIG_REGULATOR_GPIO=y
+CONFIG_SND_ARM=y
+CONFIG_SND_SOC_GENERIC_DMAENGINE_PCM=y
+CONFIG_SND_ATMEL_SOC=m
+CONFIG_SND_DESIGNWARE_I2S=m
+CONFIG_SND_SOC_FSL_ASRC=m
+CONFIG_SND_SOC_FSL_SAI=m
+CONFIG_SND_SOC_FSL_SSI=m
+CONFIG_SND_SOC_FSL_SPDIF=m
+CONFIG_SND_SOC_FSL_ESAI=m
+CONFIG_SND_SOC_IMX_AUDMUX=m
+CONFIG_SND_SOC_I2C_AND_SPI=y
+CONFIG_HZ_1000=y
diff --git a/sound/soc/Kconfig b/sound/soc/Kconfig
index 182d92efc7c8..48d18daab20e 100644
--- a/sound/soc/Kconfig
+++ b/sound/soc/Kconfig
@@ -13,7 +13,7 @@ menuconfig SND_SOC
 
 	  If you want ASoC support, you should say Y here and also to the
 	  specific driver for your SoC platform below.
-	  
+
 	  ASoC provides power efficient ALSA support for embedded battery powered
 	  SoC based systems like PDA's, Phones and Personal Media Players.
 
@@ -62,6 +62,7 @@ source "sound/soc/samsung/Kconfig"
 source "sound/soc/sh/Kconfig"
 source "sound/soc/sirf/Kconfig"
 source "sound/soc/spear/Kconfig"
+source "sound/soc/socsynth/Kconfig"
 source "sound/soc/sti/Kconfig"
 source "sound/soc/sunxi/Kconfig"
 source "sound/soc/tegra/Kconfig"
diff --git a/sound/soc/Makefile b/sound/soc/Makefile
index 9a30f21d16ee..c802f476183f 100644
--- a/sound/soc/Makefile
+++ b/sound/soc/Makefile
@@ -42,6 +42,7 @@ obj-$(CONFIG_SND_SOC)	+= samsung/
 obj-$(CONFIG_SND_SOC)	+= sh/
 obj-$(CONFIG_SND_SOC)	+= sirf/
 obj-$(CONFIG_SND_SOC)	+= spear/
+obj-$(CONFIG_SND_SOC)	+= socsynth/
 obj-$(CONFIG_SND_SOC)	+= sti/
 obj-$(CONFIG_SND_SOC)	+= sunxi/
 obj-$(CONFIG_SND_SOC)	+= tegra/
diff --git a/sound/soc/codecs/Kconfig b/sound/soc/codecs/Kconfig
index c67667bb970f..49e8c241583d 100644
--- a/sound/soc/codecs/Kconfig
+++ b/sound/soc/codecs/Kconfig
@@ -72,6 +72,7 @@ config SND_SOC_ALL_CODECS
 	select SND_SOC_ES8328_I2C if I2C
 	select SND_SOC_GTM601
 	select SND_SOC_HDAC_HDMI
+	select SND_SOC_HSYNTH7002
 	select SND_SOC_ICS43432
 	select SND_SOC_INNO_RK3036
 	select SND_SOC_ISABELLE if I2C
@@ -512,6 +513,10 @@ config SND_SOC_HDMI_CODEC
 	select SND_PCM_IEC958
 	select HDMI
 
+config SND_SOC_HSYNTH7002
+	tristate "Dummy Soc synthesizer codec-driver driver"
+
+
 config SND_SOC_ES8328
 	tristate "Everest Semi ES8328 CODEC"
 
diff --git a/sound/soc/codecs/Makefile b/sound/soc/codecs/Makefile
index 958cd4912fbc..be562a487dd2 100644
--- a/sound/soc/codecs/Makefile
+++ b/sound/soc/codecs/Makefile
@@ -66,6 +66,7 @@ snd-soc-es8328-i2c-objs := es8328-i2c.o
 snd-soc-es8328-spi-objs := es8328-spi.o
 snd-soc-gtm601-objs := gtm601.o
 snd-soc-hdac-hdmi-objs := hdac_hdmi.o
+snd-soc-hsynth7002-objs := hsynth7002.o
 snd-soc-ics43432-objs := ics43432.o
 snd-soc-inno-rk3036-objs := inno_rk3036.o
 snd-soc-isabelle-objs := isabelle.o
@@ -291,6 +292,7 @@ obj-$(CONFIG_SND_SOC_ES8328_I2C)+= snd-soc-es8328-i2c.o
 obj-$(CONFIG_SND_SOC_ES8328_SPI)+= snd-soc-es8328-spi.o
 obj-$(CONFIG_SND_SOC_GTM601)    += snd-soc-gtm601.o
 obj-$(CONFIG_SND_SOC_HDAC_HDMI) += snd-soc-hdac-hdmi.o
+obj-$(CONFIG_SND_SOC_HSYNTH7002)+= snd-soc-hsynth7002.o
 obj-$(CONFIG_SND_SOC_ICS43432)	+= snd-soc-ics43432.o
 obj-$(CONFIG_SND_SOC_INNO_RK3036)	+= snd-soc-inno-rk3036.o
 obj-$(CONFIG_SND_SOC_ISABELLE)	+= snd-soc-isabelle.o
diff --git a/sound/soc/codecs/hsynth7002.c b/sound/soc/codecs/hsynth7002.c
new file mode 100644
index 000000000000..b1898b3a5379
--- /dev/null
+++ b/sound/soc/codecs/hsynth7002.c
@@ -0,0 +1,115 @@
+/*
+ * HSYNTH7002 Soc Synthesizer dummy codec driver
+ *
+ * Copyright 2017 Holotronic
+ *  Michael Brown (the-snowwhite) <producer@holotronic.dk>
+ *  based on hsynth7002.c
+ *
+ * Licensed under the GPL-2.
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+
+#include <sound/soc.h>
+
+static const struct snd_soc_dapm_widget hsynth7002_widgets[] = {
+	SND_SOC_DAPM_INPUT("HSYNTH"),
+//	SND_SOC_DAPM_REGULATOR_SUPPLY("IOVDD", 0, 0),
+};
+
+static const struct snd_soc_dapm_route hsynth7002_routes[] = {
+	{ "Capture", NULL, "HSYNTH" },
+//	{ "Capture", NULL, "IOVDD" },
+};
+
+static int hsynth7002_set_dai_fmt(struct snd_soc_dai *dai, unsigned int fmt)
+{
+	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
+	case SND_SOC_DAIFMT_CBS_CFS:
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	switch (fmt & SND_SOC_DAIFMT_INV_MASK) {
+	case SND_SOC_DAIFMT_NB_NF:
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	switch (fmt & SND_SOC_DAIFMT_FORMAT_MASK) {
+	case SND_SOC_DAIFMT_I2S:
+	case SND_SOC_DAIFMT_DSP_A:
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static const struct snd_soc_dai_ops hsynth7002_dai_ops = {
+	.set_fmt = hsynth7002_set_dai_fmt,
+};
+
+static struct snd_soc_dai_driver hsynth7002_dai = {
+	.name = "hsynth7002-hifi",
+	.capture = {
+		.stream_name = "Capture",
+		.channels_min = 2,
+		.channels_max = 2,
+		.rates = SNDRV_PCM_RATE_8000_96000,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S18_3LE |
+			SNDRV_PCM_FMTBIT_S20_3LE | SNDRV_PCM_FMTBIT_S24_LE |
+			SNDRV_PCM_FMTBIT_S24_3LE | SNDRV_PCM_FMTBIT_S32_LE,
+		.sig_bits = 20,
+	},
+	.ops = &hsynth7002_dai_ops,
+};
+
+static const struct snd_soc_codec_driver hsynth7002_codec_driver = {
+	.component_driver = {
+		.dapm_widgets = hsynth7002_widgets,
+		.num_dapm_widgets = ARRAY_SIZE(hsynth7002_widgets),
+		.dapm_routes = hsynth7002_routes,
+		.num_dapm_routes = ARRAY_SIZE(hsynth7002_routes),
+	},
+};
+
+static int hsynth7002_probe(struct platform_device *pdev)
+{
+	return snd_soc_register_codec(&pdev->dev, &hsynth7002_codec_driver,
+			&hsynth7002_dai, 1);
+}
+
+static int hsynth7002_remove(struct platform_device *pdev)
+{
+	snd_soc_unregister_codec(&pdev->dev);
+	return 0;
+}
+
+//#ifdef CONFIG_OF
+static const struct of_device_id hsynth7002_dt_ids[] = {
+	{ .compatible = "holotr,hsynth7002", },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, hsynth7002_dt_ids);
+//#endif
+
+static struct platform_driver hsynth7002_driver = {
+	.driver = {
+		.name = "hsynth7002",
+		.of_match_table	= of_match_ptr(hsynth7002_dt_ids),
+	},
+	.probe = hsynth7002_probe,
+	.remove = hsynth7002_remove,
+};
+module_platform_driver(hsynth7002_driver);
+
+MODULE_AUTHOR("Michael Brown <producer@holotronic.dk>");
+MODULE_DESCRIPTION("HSYNTH7002 Dummy Soc synthesizer codec-driver driver");
+MODULE_LICENSE("GPL v2");
diff --git a/sound/soc/socsynth/Kconfig b/sound/soc/socsynth/Kconfig
new file mode 100644
index 000000000000..83cc38697b9e
--- /dev/null
+++ b/sound/soc/socsynth/Kconfig
@@ -0,0 +1,31 @@
+config SND_SOC_OC_I2S
+       tristate "OpenCores I2S Controller"
+       help
+         If you say yes to this option, support will be included for the
+         OpenCores I2S controller. For details see
+
+         This driver can also be built as a module.  If so, the module
+         will be called opencores_i2s.
+
+config SND_SOC_HSYNTHDMA
+       tristate "holosynth DMA Controller"
+       help
+         If you say yes to this option, support will be included for the
+         HSYNTHDMA dma controller. For details see
+
+         This driver can also be built as a module.  If so, the module
+         will be called hsynthdma.
+
+config SND_SOC_DE1_WM8731_HSYNTH
+       tristate "DE1-Audio MIDI support"
+       select SND_SOC_WM8731
+       select SND_SOC_OC_I2S
+       select SND_SOC_GENERIC_DMAENGINE_PCM
+       select REGMAP_MMIO
+       select SND_SOC_HSYNTH7002
+       select SND_SOC_HSYNTHDMA
+
+config SND_SOC_HSYNTH_MIDI
+       tristate "Holosynth MIDI support"
+       select SND_RAWMIDI
+       select REGMAP_MMIO
diff --git a/sound/soc/socsynth/Makefile b/sound/soc/socsynth/Makefile
new file mode 100644
index 000000000000..aa55f564c844
--- /dev/null
+++ b/sound/soc/socsynth/Makefile
@@ -0,0 +1,11 @@
+snd-soc-opencores_i2s-objs := opencores_i2s.o
+obj-$(CONFIG_SND_SOC_OC_I2S) += snd-soc-opencores_i2s.o
+
+snd-de1-soc-wm8731-hsynth-objs := de1-soc-wm8731-hsynth.o
+obj-$(CONFIG_SND_SOC_DE1_WM8731_HSYNTH) += snd-de1-soc-wm8731-hsynth.o
+
+snd-soc-hsynthdma-objs := hsynthdma.o
+obj-$(CONFIG_SND_SOC_HSYNTHDMA) += snd-soc-hsynthdma.o
+
+snd-soc-hsynth-midi-objs := hsynth-midi.o
+obj-$(CONFIG_SND_SOC_HSYNTH_MIDI) += snd-soc-hsynth-midi.o
diff --git a/sound/soc/socsynth/de1-soc-wm8731-hsynth.c b/sound/soc/socsynth/de1-soc-wm8731-hsynth.c
new file mode 100644
index 000000000000..ba83a1120d6c
--- /dev/null
+++ b/sound/soc/socsynth/de1-soc-wm8731-hsynth.c
@@ -0,0 +1,458 @@
+/*
+* de1-soc-wm8731 -- SoC audio for Terasic DE1-SoC board
+* Author: B. Steinsbo <bsteinsbo@gmail.com>
+*
+* Based on sam9g20_wm8731 by
+* Sedji Gaouaou <sedji.gaouaou@atmel.com>
+*
+* Licensed under the GPL-2.
+*/
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/clk.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
+#include <linux/uaccess.h>
+#include <linux/ioport.h>
+#include <linux/io.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+// #include <sound/seq_kernel.h>
+// #include <sound/rawmidi.h>
+#include <sound/initval.h>
+
+// #define SOCSYNTHMIDI_LOG_PREFIX "socsynthmidi: "
+// #define midi_ins 0
+// #define midi_outs 1
+//
+// #define MIDIREG_BASE 0xff200000
+// #define MIDIREG_SIZE PAGE_SIZE
+// #define MIDIREG_OFFSET 0x50000
+
+#define WM8731_SYSCLK_XTAL 1
+#define WM8731_SYSCLK_MCLK 2
+#define MCLK_RATE_48K 12288000 /* fs*256 */
+#define MCLK_RATE_44K 16934400 /* fs*384 */
+
+// #define printe(...) pr_err(SOCSYNTHMIDI_LOG_PREFIX __VA_ARGS__)
+//
+// static int snd_socmidi_open(struct snd_rawmidi_substream *substream);
+// static int snd_socmidi_close(struct snd_rawmidi_substream *substream);
+// static int hmidi_card_probe(struct snd_soc_card *card);
+// static int hmidi_card_remove(struct snd_soc_card *card);
+// static void snd_socmidi_transmit(unsigned char data);
+// static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int);
+// static int hsound_midi_init(struct snd_card *card);
+//
+// void *midireg_mem;
+//
+// static int snd_socmidi_open(struct snd_rawmidi_substream *substream)
+// {
+//     return 0;
+// }
+//
+// static int snd_socmidi_close(struct snd_rawmidi_substream *substream)
+// {
+//     return 0;
+// }
+//
+// static int hmidi_card_probe(struct snd_soc_card *card)
+// {
+//     int err;
+//
+//     err = hsound_midi_init(card->snd_card);
+//
+//     if (err < 0) {
+//         //		dev_dbg(&pdev->dev,"hsound_midi_init failed: %d\n", err);
+//         return err;
+//     }
+//
+//     return 0;
+// }
+//
+// static int hmidi_card_remove(struct snd_soc_card *card)
+// {
+//     return 0;
+// }
+//
+// static void snd_socmidi_transmit(unsigned char data){
+//
+//     iowrite8(data, midireg_mem);
+//
+// }
+//
+// static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int up) {
+//
+//     if (!up)
+//         return;
+//
+//     while (1) {
+//         unsigned char data;
+//         if (snd_rawmidi_transmit(substream, &data, 1) != 1)
+//             break; /* no more data */
+//         snd_socmidi_transmit(data);
+//     }
+// }
+//
+// static struct snd_rawmidi *g_rmidi;
+//
+// static struct snd_rawmidi_ops snd_socmidi_output_ops = {
+//     .open = snd_socmidi_open,
+//     .close = snd_socmidi_close,
+//     .trigger = snd_socmidi_output_trigger,
+// };
+//
+// static void pisnd_get_port_info(struct snd_rawmidi *rmidi, int number, struct snd_seq_port_info *seq_port_info)
+// {
+//     seq_port_info->type =
+//     SNDRV_SEQ_PORT_TYPE_MIDI_GENERIC |
+//     SNDRV_SEQ_PORT_TYPE_HARDWARE |
+//     SNDRV_SEQ_PORT_TYPE_PORT;
+//     seq_port_info->midi_voices = 0;
+// }
+//
+// static struct snd_rawmidi_global_ops hsnd_global_ops = {.get_port_info = pisnd_get_port_info, };
+//
+// static int hsound_midi_init(struct snd_card *card)
+// {
+//     int err;
+//     struct resource *res;
+//
+//     err = snd_rawmidi_new(card, "SocMIDI", 0, midi_outs, midi_ins, &g_rmidi);
+//
+//     if (err < 0) {
+//         printe("snd_rawmidi_new failed: %d\n", err);
+//         return err;
+//     }
+//
+//     strcpy(g_rmidi->name, "Holosynth MIDI ");
+//
+//     g_rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT;
+//     // rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT |
+//     //                     SNDRV_RAWMIDI_INFO_INPUT |
+//     //                     SNDRV_RAWMIDI_INFO_DUPLEX;
+//
+//     g_rmidi->ops = &hsnd_global_ops;
+//
+//     g_rmidi->private_data = (void *)0;
+//
+//     snd_rawmidi_set_ops(g_rmidi, SNDRV_RAWMIDI_STREAM_OUTPUT, &snd_socmidi_output_ops);
+//     //    snd_rawmidi_set_ops(rmidi, SNDRV_RAWMIDI_STREAM_INPUT, &snd_socmidi_input_ops);
+//
+//     res = request_mem_region((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE, "MIDIREG");
+//     if (res == NULL) {
+//         return -EBUSY;
+//     }
+//
+//     midireg_mem = ioremap((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE);
+//     if (midireg_mem == NULL) {
+//         release_mem_region(MIDIREG_BASE, MIDIREG_SIZE);
+//         return -EFAULT;
+//     }
+//
+//     return 0;
+// }
+
+static unsigned int i2c_mux_gpio;
+
+static int de1soc_hw_params(struct snd_pcm_substream *substream,
+    struct snd_pcm_hw_params *params)
+{
+    struct snd_soc_pcm_runtime *rtd = substream->private_data;
+    struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct device *dev = rtd->card->dev;
+    unsigned int mclk_freq;
+    int ret;
+
+    if ((params_rate(params) % 44100) == 0) {
+        mclk_freq = MCLK_RATE_44K;
+    } else if ((params_rate(params) % 48000) == 0) {
+        mclk_freq = MCLK_RATE_48K;
+    } else
+        return -EINVAL;
+
+    /* set codec mclk configuration */
+    ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+        mclk_freq, SND_SOC_CLOCK_OUT);
+    if (ret < 0)
+        return ret;
+
+    dev_dbg(dev, "hw_params: mclk_freq=%d\n", mclk_freq);
+    return 0;
+}
+
+static void de1soc_shutdown(struct snd_pcm_substream *substream)
+{
+    struct snd_soc_pcm_runtime *rtd = substream->private_data;
+    struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct device *dev = rtd->card->dev;
+    int ret;
+
+    dev_dbg(dev, "shutdown\n");
+    ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+        0, SND_SOC_CLOCK_OUT);
+    if (ret < 0) {
+        dev_err(dev, "Failed to reset WM8731 SYSCLK: %d\n", ret);
+    }
+}
+
+static struct snd_soc_ops de1soc_ops = {
+    // .startup
+    .shutdown = de1soc_shutdown,
+    .hw_params = de1soc_hw_params,
+    // .hw_free
+    // .prepare
+    // .trigger
+};
+
+static const struct snd_soc_dapm_widget de1soc_dapm_widgets[] = {
+    SND_SOC_DAPM_HP("Headphone Jack", NULL),
+    SND_SOC_DAPM_MIC("Microphone Jack", NULL),
+    SND_SOC_DAPM_LINE("Line In Jack", NULL),
+    SND_SOC_DAPM_LINE("Line Out Jack", NULL),
+    SND_SOC_DAPM_LINE("Hsynth in", NULL),
+};
+
+static const struct snd_soc_dapm_route intercon[] = {
+    {"MICIN", NULL, "Mic Bias"},
+    {"Mic Bias", NULL, "Microphone Jack"},
+    {"LLINEIN", NULL, "Line In Jack"},
+    {"RLINEIN", NULL, "Line In Jack"},
+    {"Line Out Jack", NULL, "LOUT"},
+    {"Line Out Jack", NULL, "ROUT"},
+    {"Headphone Jack", NULL, "LHPOUT"},
+    {"Headphone Jack", NULL, "RHPOUT"},
+    {"HSYNTH", NULL, "Hsynth in"},
+};
+
+static int de1soc_wm8731_init(struct snd_soc_pcm_runtime *rtd)
+{
+    struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+    struct device *dev = rtd->card->dev;
+    unsigned int fmt;
+    int ret;
+
+    dev_dbg(dev, "init\n");
+
+    fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+        SND_SOC_DAIFMT_CBS_CFS;
+
+    /* set cpu DAI configuration */
+    ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
+    if (ret < 0)
+        return ret;
+
+    /* set codec DAI configuration */
+    ret = snd_soc_dai_set_fmt(codec_dai, fmt);
+    if (ret < 0)
+        return ret;
+
+    /* Don't let codec constraints interfere */
+    ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+        0, SND_SOC_CLOCK_OUT);
+    if (ret < 0) {
+        dev_err(dev, "Failed to set WM8731 SYSCLK: %d\n", ret);
+        return ret;
+    }
+
+    return 0;
+}
+
+static int soc_hsynth_init(struct snd_soc_pcm_runtime *rtd)
+{
+    struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+    struct device *dev = rtd->card->dev;
+    unsigned int fmt;
+    int ret;
+
+    dev_dbg(dev, "init\n");
+
+    fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+    SND_SOC_DAIFMT_CBS_CFS;
+
+    /* set cpu DAI configuration */
+    ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
+    if (ret < 0)
+        return ret;
+
+    /* set codec DAI configuration */
+    ret = snd_soc_dai_set_fmt(codec_dai, fmt);
+    if (ret < 0)
+        return ret;
+
+    return 0;
+}
+
+static struct snd_soc_dai_link de1soc_dai[] = {
+	{ /* Primary DAI i/f */
+    .name = "SSND0",
+    .stream_name = "WM8731 PCM",
+    .cpu_dai_name = "ff200000.i2s",
+    .codec_dai_name = "wm8731-hifi",
+    .init = de1soc_wm8731_init,
+    .platform_name = "de1soc",
+    .codec_name = "wm8731.0-001a",
+    .ops = &de1soc_ops,
+	}, { /* Sec_Fifo Playback i/f */
+    .name = "SSND1",
+    .stream_name = "HSYNTH PCM",
+    .cpu_dai_name = "ff200000.dmalink",
+    .codec_dai_name = "hsynth7002-hifi",
+    .init = soc_hsynth_init,
+    .platform_name = "de1soc",
+    .codec_name = "hsynth7002.hsynth",
+	},
+};
+/*
+static struct snd_soc_dai_link hsynth_soc_dai = {
+    .name = "HSYNTH",
+    .stream_name = "HSYNTH PCM",
+    .cpu_dai_name = "ff200000.dmalink",
+    .codec_dai_name = "hsynth7002-hifi",
+    .init = soc_hsynth_init,
+    .platform_name = "de1soc",
+    .codec_name = "hsynth7002.hsynth",
+};
+*/
+static struct snd_soc_card snd_soc_de1soc = {
+    .name = "DE1SND",
+    .owner = THIS_MODULE,
+    .dai_link = de1soc_dai,
+//    .dai_link = &hsynth_soc_dai,
+    .num_links = ARRAY_SIZE(de1soc_dai),
+
+//     .probe        = hmidi_card_probe,
+//     .remove       = hmidi_card_remove,
+
+    .dapm_widgets = de1soc_dapm_widgets,
+    .num_dapm_widgets = ARRAY_SIZE(de1soc_dapm_widgets),
+    .dapm_routes = intercon,
+    .num_dapm_routes = ARRAY_SIZE(intercon),
+};
+
+static int de1soc_audio_probe(struct platform_device *pdev)
+{
+    struct device_node *np = pdev->dev.of_node;
+    struct device_node *codec_np, *cpu_np;
+    struct snd_soc_card *card = &snd_soc_de1soc;
+    int ret;
+
+    if (!np) {
+        return -ENODEV;
+    }
+
+    card->dev = &pdev->dev;
+
+    /* I2C bus is muxed between HPS and FPGA. Set mux to HPS */
+    i2c_mux_gpio = of_get_named_gpio(np, "i2c-mux-gpio", 0);
+    if (gpio_is_valid(i2c_mux_gpio)) {
+        ret = devm_gpio_request_one(&pdev->dev,
+            i2c_mux_gpio, GPIOF_OUT_INIT_LOW, "I2C_MUX");
+        if (ret) {
+            dev_err(&pdev->dev,
+                "Failed to request GPIO_%d for i2c_mux: %d\n",
+                i2c_mux_gpio, ret);
+            return ret;
+        }
+        gpio_set_value(i2c_mux_gpio, 1);
+    }
+
+    /* Parse codec1 info */
+    de1soc_dai[0].codec_name = NULL;
+    codec_np = of_parse_phandle(np, "audio-codec", 0);
+    if (!codec_np) {
+        dev_err(&pdev->dev, "audio-codec info missing\n");
+        return -EINVAL;
+    }
+    de1soc_dai[0].codec_of_node = codec_np;
+
+    /* Parse dai and platform info */
+    de1soc_dai[0].cpu_dai_name = NULL;
+    de1soc_dai[0].platform_name = NULL;
+    cpu_np = of_parse_phandle(np, "i2s-controller", 0);
+    if (!cpu_np) {
+        dev_err(&pdev->dev, "i2s dai1 and pcm info missing\n");
+        return -EINVAL;
+    }
+
+    de1soc_dai[0].cpu_of_node = cpu_np;
+    de1soc_dai[0].platform_of_node = cpu_np;
+
+    of_node_put(codec_np);
+    of_node_put(cpu_np);
+
+    /* Parse codec2 info */
+    de1soc_dai[1].codec_name = NULL;
+    codec_np = of_parse_phandle(np, "synth-codec", 0);
+    if (!codec_np) {
+        dev_err(&pdev->dev, "synth-codec info missing\n");
+        return -EINVAL;
+    }
+    de1soc_dai[1].codec_of_node = codec_np;
+
+    /* Parse dai and platform info */
+    de1soc_dai[1].cpu_dai_name = NULL;
+    de1soc_dai[1].platform_name = NULL;
+    cpu_np = of_parse_phandle(np, "dmalink-controller", 0);
+    if (!cpu_np) {
+        dev_err(&pdev->dev, "dmalink-controller info missing\n");
+        return -EINVAL;
+    }
+
+    de1soc_dai[1].cpu_of_node = cpu_np;
+    de1soc_dai[1].platform_of_node = cpu_np;
+
+    of_node_put(codec_np);
+    of_node_put(cpu_np);
+
+
+    ret = snd_soc_register_card(card);
+    if (ret) {
+        dev_err(&pdev->dev, "snd_soc_register_card() failed\n");
+    }
+
+    return ret;
+}
+
+static int de1soc_audio_remove(struct platform_device *pdev)
+{
+    struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+    if (gpio_is_valid(i2c_mux_gpio))
+        devm_gpio_free(&pdev->dev, i2c_mux_gpio);
+
+    snd_soc_unregister_card(card);
+
+    return 0;
+}
+
+static const struct of_device_id de1soc_wm8731_dt_ids[] = {
+    { .compatible = "opencores,de1soc-wm8731-audio-midi", },
+    { }
+};
+MODULE_DEVICE_TABLE(of, de1soc_wm8731_dt_ids);
+
+static struct platform_driver de1soc_audio_driver = {
+    .driver = {
+        .name	= "de1soc-audio",
+        .owner	= THIS_MODULE,
+        .of_match_table = of_match_ptr(de1soc_wm8731_dt_ids),
+    },
+    .probe	= de1soc_audio_probe,
+    .remove	= de1soc_audio_remove,
+};
+
+module_platform_driver(de1soc_audio_driver);
+
+/* Module information */
+MODULE_AUTHOR("Bjarne Steinsbo <bsteinsbo@gmail.com>");
+MODULE_DESCRIPTION("ALSA SoC DE1-SoC_WM8731");
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/socsynth/hsynth-midi.c b/sound/soc/socsynth/hsynth-midi.c
new file mode 100644
index 000000000000..e226bd80cc41
--- /dev/null
+++ b/sound/soc/socsynth/hsynth-midi.c
@@ -0,0 +1,296 @@
+/*
+* hsynth-soc -- SoC audio ( midi for Altera SoC boards
+* Author: Michael Brown the-snowwhite <producer@holotronic.dk>
+*
+* Based on de1-soc-wm8731 by
+*  B. Steinsbo <bsteinsbo@gmail.com>
+*
+* Licensed under the GPL-2.
+*/
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/clk.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/uaccess.h>
+#include <linux/ioport.h>
+#include <linux/io.h>
+
+#include <sound/core.h>
+#include <sound/seq_kernel.h>
+#include <sound/rawmidi.h>
+#include <sound/initval.h>
+// #include <sound/pcm.h>
+// #include <sound/pcm_params.h>
+#include <sound/soc.h>
+
+#define SYNTHSOCSOUND_LOG_PREFIX "synthsound: "
+
+#define midi_ins 0
+#define midi_outs 1
+
+#define MIDIREG_BASE 0xff200000
+#define MIDIREG_SIZE PAGE_SIZE
+#define MIDIREG_OFFSET 0x50000
+
+#define printe(...) pr_err(SYNTHSOCSOUND_LOG_PREFIX __VA_ARGS__)
+
+static int snd_socmidi_open(struct snd_rawmidi_substream *substream);
+static int snd_socmidi_close(struct snd_rawmidi_substream *substream);
+static int hmidi_card_probe(struct snd_soc_card *card);
+static int hmidi_card_remove(struct snd_soc_card *card);
+static void snd_socmidi_transmit(unsigned char data);
+static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int);
+static int hsound_midi_init(struct snd_card *card);
+
+void *midireg_mem;
+
+static int snd_socmidi_open(struct snd_rawmidi_substream *substream)
+{
+    return 0;
+}
+
+static int snd_socmidi_close(struct snd_rawmidi_substream *substream)
+{
+    return 0;
+}
+
+static int hmidi_card_probe(struct snd_soc_card *card)
+{
+    int err;
+
+    err = hsound_midi_init(card->snd_card);
+
+    if (err < 0) {
+//		dev_dbg(&pdev->dev,"hsound_midi_init failed: %d\n", err);
+        return err;
+    }
+
+    return 0;
+}
+
+static int hmidi_card_remove(struct snd_soc_card *card)
+{
+    return 0;
+}
+
+static void snd_socmidi_transmit(unsigned char data){
+
+    iowrite8(data, midireg_mem);
+
+}
+
+static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int up) {
+
+    if (!up)
+        return;
+
+    while (1) {
+        unsigned char data;
+        if (snd_rawmidi_transmit(substream, &data, 1) != 1)
+            break; /* no more data */
+        snd_socmidi_transmit(data);
+    }
+}
+
+static struct snd_rawmidi *g_rmidi;
+
+static struct snd_rawmidi_ops snd_socmidi_output_ops = {
+    .open = snd_socmidi_open,
+    .close = snd_socmidi_close,
+    .trigger = snd_socmidi_output_trigger,
+};
+
+static void pisnd_get_port_info(struct snd_rawmidi *rmidi, int number, struct snd_seq_port_info *seq_port_info)
+{
+    seq_port_info->type =
+        SNDRV_SEQ_PORT_TYPE_MIDI_GENERIC |
+        SNDRV_SEQ_PORT_TYPE_HARDWARE |
+        SNDRV_SEQ_PORT_TYPE_PORT;
+    seq_port_info->midi_voices = 0;
+}
+
+static struct snd_rawmidi_global_ops hsnd_global_ops = {.get_port_info = pisnd_get_port_info, };
+
+static int hsound_midi_init(struct snd_card *card)
+{
+    int err;
+struct resource *res;
+
+    err = snd_rawmidi_new(card, "SocMIDI", 0, midi_outs, midi_ins, &g_rmidi);
+
+    if (err < 0) {
+        printe("snd_rawmidi_new failed: %d\n", err);
+        return err;
+    }
+
+    strcpy(g_rmidi->name, "Holosynth MIDI ");
+//	strcat(g_rmidi->name, pisnd_spi_get_serial());
+
+    g_rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT;
+    // rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT |
+    //                     SNDRV_RAWMIDI_INFO_INPUT |
+    //                     SNDRV_RAWMIDI_INFO_DUPLEX;
+
+    g_rmidi->ops = &hsnd_global_ops;
+
+    g_rmidi->private_data = (void *)0;
+
+    snd_rawmidi_set_ops(g_rmidi, SNDRV_RAWMIDI_STREAM_OUTPUT, &snd_socmidi_output_ops);
+//    snd_rawmidi_set_ops(rmidi, SNDRV_RAWMIDI_STREAM_INPUT, &snd_socmidi_input_ops);
+
+    res = request_mem_region((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE, "MIDIREG");
+    if (res == NULL) {
+        return -EBUSY;
+    }
+
+    midireg_mem = ioremap((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE);
+    if (midireg_mem == NULL) {
+        release_mem_region(MIDIREG_BASE, MIDIREG_SIZE);
+        return -EFAULT;
+    }
+
+    return 0;
+}
+
+/*
+static const struct snd_soc_dapm_widget soc_dapm_widgets[] = {
+    SND_SOC_DAPM_LINE("Hsynth in", NULL),
+};
+
+static const struct snd_soc_dapm_route intercon[] = {
+    {"PDM_DAT", NULL, "Hsynth in"},
+//	{"Mic Bias", NULL, "Microphone Jack"},
+//	{"LLINEIN", NULL, "Line In Jack"},
+//	{"RLINEIN", NULL, "Line In Jack"},
+//	{"Line Out Jack", NULL, "LOUT"},
+//	{"Line Out Jack", NULL, "ROUT"},
+//	{"Headphone Jack", NULL, "LHPOUT"},
+//	{"Headphone Jack", NULL, "RHPOUT"},
+};
+
+static int soc_hsynth_init(struct snd_soc_pcm_runtime *rtd)
+{
+//	struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+    struct device *dev = rtd->card->dev;
+    unsigned int fmt;
+    int ret;
+
+    dev_dbg(dev, "init\n");
+
+    fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+        SND_SOC_DAIFMT_CBS_CFS;
+
+    // set cpu DAI configuration
+    ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
+    if (ret < 0)
+        return ret;
+
+
+    return 0;
+}
+
+static struct snd_soc_dai_link hsynth_soc_dai = {
+    .name = "HSYNTH",
+    .stream_name = "HSYNTH PCM",
+    .cpu_dai_name = "ff200000.dmalink",
+    .codec_dai_name = "hsynth7002-hifi",
+    .init = soc_hsynth_init,
+    .platform_name = "socsynth",
+    .codec_name = "hsynth7002.hsynth",
+//	.ops = &hsynth_soc_ops,
+};
+*/
+static struct snd_soc_card snd_soc_hsynth_soc = {
+    .name = "HSYNTH-MIDI",
+    .owner = THIS_MODULE,
+//     .dai_link = &hsynth_soc_dai,
+//     .num_links = 1,
+
+    .probe        = hmidi_card_probe,
+    .remove       = hmidi_card_remove,
+
+//    .dapm_widgets = soc_dapm_widgets,
+//    .num_dapm_widgets = ARRAY_SIZE(soc_dapm_widgets),
+//    .dapm_routes = intercon,
+//    .num_dapm_routes = ARRAY_SIZE(intercon),
+};
+
+static int hsynth_soc_audio_probe(struct platform_device *pdev)
+{
+//         struct device_node *np = pdev->dev.of_node;
+//     struct device_node *codec_np, *cpu_np;
+    struct snd_soc_card *card = &snd_soc_hsynth_soc;
+    int ret;
+//
+//     if (!np) {
+//         return -ENODEV;
+//     }
+//
+    card->dev = &pdev->dev;
+//
+//
+//     /* Parse codec info */
+//     hsynth_soc_dai.codec_name = NULL;
+//     codec_np = of_parse_phandle(np, "audio-codec", 0);
+//     if (!codec_np) {
+//         dev_err(&pdev->dev, "codec info missing\n");
+//         return -EINVAL;
+//     }
+//     hsynth_soc_dai.codec_of_node = codec_np;
+//
+//     /* Parse dai and platform info */
+//     hsynth_soc_dai.cpu_dai_name = NULL;
+//     hsynth_soc_dai.platform_name = NULL;
+//     cpu_np = of_parse_phandle(np, "dmalink-controller", 0);
+//     if (!cpu_np) {
+//         dev_err(&pdev->dev, "dai and pcm info missing\n");
+//         return -EINVAL;
+//     }
+//     hsynth_soc_dai.cpu_of_node = cpu_np;
+//     hsynth_soc_dai.platform_of_node = cpu_np;
+//
+//     of_node_put(codec_np);
+//     of_node_put(cpu_np);
+//
+    ret = snd_soc_register_card(card);
+    if (ret) {
+        dev_err(&pdev->dev, "snd_soc_register_card() failed\n");
+    }
+
+    return ret;
+}
+
+static int soc_audio_remove(struct platform_device *pdev)
+{
+    struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+     snd_soc_unregister_card(card);
+
+    return 0;
+}
+
+static const struct of_device_id soc_hsynth_dt_ids[] = {
+    { .compatible = "holotr,socsynth-midi", },
+    { }
+};
+MODULE_DEVICE_TABLE(of, soc_hsynth_dt_ids);
+
+static struct platform_driver soc_audio_driver = {
+    .driver = {
+        .name	= "soc-synth-midi",
+        .owner	= THIS_MODULE,
+        .of_match_table = of_match_ptr(soc_hsynth_dt_ids),
+    },
+    .probe	= hsynth_soc_audio_probe,
+    .remove	= soc_audio_remove,
+};
+
+module_platform_driver(soc_audio_driver);
+
+/* Module information */
+MODULE_AUTHOR("Michael Brown (the-snowwhite) <producer@holotronic.dk>");
+MODULE_DESCRIPTION("ALSA SoC HSYNTH-MIDI");
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/socsynth/hsynthdma.c b/sound/soc/socsynth/hsynthdma.c
new file mode 100644
index 000000000000..afb4850d98ed
--- /dev/null
+++ b/sound/soc/socsynth/hsynthdma.c
@@ -0,0 +1,418 @@
+/*
+* Copyright (C) 2017 Michael Brown (the-snowwhite) <producer@holotronic.dk>
+* Largely based on opencores_i2s.c by Bjarne Steinsbo <bsteinsbo@gmail.com>.
+*
+* Licensed under the GPL-2.
+*/
+
+#include <linux/clk.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/regmap.h>
+#include <linux/slab.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/dmaengine_pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+
+//#define DAC_FIFO_ADDR  0x00
+#define STATUS_ADDR    0x04
+#define CMD_ADDR       0x08
+#define ADC_FIFO_ADDR  0x00
+
+/* Commands to register at CMD_ADDR */
+#define PB_FIFO_CLEAR  BIT(0)
+#define PB_ENABLE      BIT(1)
+#define CAP_FIFO_CLEAR BIT(2)
+#define CAP_ENABLE     BIT(3)
+
+#define CLK_CTRL1      0x00
+#define CLK_CTRL2      0x04
+
+/* Bit-fields of clk control register 1 */
+#define CLK_MASTER_SLAVE  BIT(0)
+#define CLK_SEL_48_44    BIT(1)
+#define MCLK_DIV_SHIFT   (24)
+#define MCLK_DIV_MASK    GENMASK(MCLK_DIV_SHIFT + 7, MCLK_DIV_SHIFT)
+#define BCLK_DIV_SHIFT   (16)
+#define BCLK_DIV_MASK    GENMASK(BCLK_DIV_SHIFT + 7, BCLK_DIV_SHIFT)
+/* Bit-fields of clk control register 2 */
+#define PB_LRC_DIV_SHIFT  (8)
+#define PB_LRC_DIV_MASK          GENMASK(PB_LRC_DIV_SHIFT + 7, PB_LRC_DIV_SHIFT)
+#define CAP_LRC_DIV_SHIFT (0)
+#define CAP_LRC_DIV_MASK  GENMASK(CAP_LRC_DIV_SHIFT + 7, CAP_LRC_DIV_SHIFT)
+
+/* The frame size is not configurable */
+#define BITS_PER_FRAME 64
+
+struct holotr_dmalink {
+    struct regmap *regmap_data;
+    struct regmap *regmap_clk;
+//       struct clk *clk48;
+    struct clk *clk44;
+
+    struct snd_soc_dai_driver dai_driver;
+
+    struct snd_dmaengine_dai_dma_data capture_dma_data;
+//       struct snd_dmaengine_dai_dma_data playback_dma_data;
+
+    struct snd_ratnum ratnum;
+    struct snd_pcm_hw_constraint_ratnums rate_constraints;
+};
+
+static int holotr_dmalink_trigger(struct snd_pcm_substream *substream, int cmd,
+    struct snd_soc_dai *dai)
+{
+    struct holotr_dmalink *dmalink = snd_soc_dai_get_drvdata(dai);
+    unsigned int mask, val;
+
+    if (substream->stream == SNDRV_PCM_STREAM_CAPTURE)
+            mask = CAP_ENABLE;
+    else
+            mask = PB_ENABLE;
+
+    switch (cmd) {
+    case SNDRV_PCM_TRIGGER_START:
+    case SNDRV_PCM_TRIGGER_RESUME:
+    case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+            val = mask;
+            break;
+    case SNDRV_PCM_TRIGGER_STOP:
+    case SNDRV_PCM_TRIGGER_SUSPEND:
+    case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+            val = 0;
+            break;
+    default:
+            return -EINVAL;
+    }
+
+    regmap_update_bits(dmalink->regmap_data, CMD_ADDR, mask, val);
+//     regmap_write(dmalink->regmap_data, CMD_ADDR, val);
+
+    dev_dbg(dai->dev, "trigger %x\n", val);
+    return 0;
+}
+
+static int divisor_value(unsigned long xtal_rate, unsigned long rate, int shift)
+{
+    return ((xtal_rate / rate / 2) >> shift) - 1;
+}
+
+static int holotr_dmalink_hw_params(struct snd_pcm_substream *substream,
+    struct snd_pcm_hw_params *params, struct snd_soc_dai *dai)
+{
+    struct holotr_dmalink *dmalink = snd_soc_dai_get_drvdata(dai);
+    unsigned long xtal_rate;
+    int lrclk_div;
+    int mclk_div;
+    int bclk_div;
+    int mask, val;
+    int mask2, val2;
+
+    dev_dbg(dai->dev, "hw_params fmt=0x%x\n", params_format(params));
+    dev_dbg(dai->dev, "hw_params rate=%d\n", params_rate(params));
+    if (params_format(params) != SNDRV_PCM_FORMAT_S32_LE)
+            return -EINVAL;
+
+    if ((params_rate(params) % 44100) == 0) {
+        val = CLK_SEL_48_44;
+        xtal_rate = clk_get_rate(dmalink->clk44);
+        mclk_div = divisor_value(xtal_rate, 16934400, 0); /* fs*384 at 44.1kHz */
+    }
+//    else if ((params_rate(params) % 48000) == 0) {
+//      val = 0;
+//      xtal_rate = clk_get_rate(dmalink->clk48);
+//      mclk_div = divisor_value(xtal_rate, 12288000, 0); /* fs*256 at 48kHz */
+//    }
+    else
+        return -EINVAL;
+
+    mask = CLK_SEL_48_44;
+    mask2 = 0;
+
+    lrclk_div = divisor_value(xtal_rate, params_rate(params), 4);
+    bclk_div = divisor_value(xtal_rate, params_rate(params) * BITS_PER_FRAME, 0);
+    dev_dbg(dai->dev, "hw_params mclk_div=%d\n", mclk_div);
+    dev_dbg(dai->dev, "hw_params lrclk_div=%d\n", lrclk_div);
+    dev_dbg(dai->dev, "hw_params bclk_div=%d\n", bclk_div);
+    val |= mclk_div << MCLK_DIV_SHIFT;
+    mask |= MCLK_DIV_MASK;
+    val |= bclk_div << BCLK_DIV_SHIFT;
+    mask |= BCLK_DIV_MASK;
+    regmap_update_bits(dmalink->regmap_clk, CLK_CTRL1, mask, val);
+    dev_dbg(dai->dev, "hw_params mask=0x%x val=0x%x\n", mask, val);
+    if (substream->stream == SNDRV_PCM_STREAM_CAPTURE) {
+        val2 = lrclk_div << CAP_LRC_DIV_SHIFT;
+        mask2 = CAP_LRC_DIV_MASK;
+    } else {
+        val2 = lrclk_div << PB_LRC_DIV_SHIFT;
+        mask2 = PB_LRC_DIV_MASK;
+    }
+    regmap_update_bits(dmalink->regmap_clk, CLK_CTRL2, mask2, val2);
+    dev_dbg(dai->dev, "hw_params mask2=0x%x val2=0x%x\n", mask2, val2);
+    return 0;
+}
+
+static int holotr_dmalink_set_fmt(struct snd_soc_dai *dai, unsigned int fmt)
+{
+    struct holotr_dmalink *dmalink = snd_soc_dai_get_drvdata(dai);
+    int val = 0;
+    dev_dbg(dai->dev, "set_fmt 0x%x\n", fmt);
+
+    if ((fmt & SND_SOC_DAIFMT_FORMAT_MASK) != SND_SOC_DAIFMT_I2S)
+        return -EINVAL;
+
+    if ((fmt & SND_SOC_DAIFMT_INV_MASK) != SND_SOC_DAIFMT_NB_NF)
+        return -EINVAL;
+
+    switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
+    case SND_SOC_DAIFMT_CBM_CFM:
+        val = 0;
+        break;
+    case SND_SOC_DAIFMT_CBS_CFS:
+        val = 1;
+        break;
+    default:
+        return -EINVAL;
+    }
+
+    dev_dbg(dai->dev, "set_fmt master=%d\n", val);
+    regmap_update_bits(dmalink->regmap_clk, 0, CLK_MASTER_SLAVE, val);
+    return 0;
+}
+
+static int holotr_dmalink_sysclk(struct snd_soc_dai *dai, int clk_id,
+    unsigned int freq, int dir)
+{
+    struct holotr_dmalink *dmalink = snd_soc_dai_get_drvdata(dai);
+    int val = SND_SOC_CLOCK_IN ? 1 : 0;
+    dev_dbg(dai->dev, "sysclk id=%d freq=%d dir=%d\n", clk_id, freq, dir);
+    regmap_update_bits(dmalink->regmap_clk, 0, CLK_MASTER_SLAVE, val);
+    return 0;
+}
+
+static void holotr_dmalink_shutdown(struct snd_pcm_substream *substream,
+    struct snd_soc_dai *dai)
+{
+    struct holotr_dmalink *dmalink = snd_soc_dai_get_drvdata(dai);
+    int mask;
+    int val;
+    dev_dbg(dai->dev, "shutdown\n");
+
+    if (substream->stream == SNDRV_PCM_STREAM_CAPTURE)
+        mask = CAP_ENABLE | CAP_FIFO_CLEAR;
+    else
+        mask = PB_ENABLE | PB_FIFO_CLEAR;
+
+    val = PB_FIFO_CLEAR | CAP_FIFO_CLEAR;
+    regmap_update_bits(dmalink->regmap_data, CMD_ADDR, mask, val);
+}
+
+static int holotr_dmalink_dai_probe(struct snd_soc_dai *dai)
+{
+    struct holotr_dmalink *dmalink = snd_soc_dai_get_drvdata(dai);
+
+    dev_dbg(dai->dev, "dai_probe\n");
+//       snd_soc_dai_init_dma_data(dai, &dmalink->playback_dma_data,
+    snd_soc_dai_init_dma_data(dai, NULL,
+    &dmalink->capture_dma_data);
+
+    return 0;
+}
+
+static const struct snd_soc_dai_ops holotr_dmalink_dai_ops = {
+    .set_sysclk = holotr_dmalink_sysclk,
+    .set_fmt = holotr_dmalink_set_fmt,
+    .shutdown = holotr_dmalink_shutdown,
+    .hw_params = holotr_dmalink_hw_params,
+    .trigger = holotr_dmalink_trigger,
+};
+
+static struct snd_soc_dai_driver holotr_dmalink_dai = {
+    .probe = holotr_dmalink_dai_probe,
+    .capture = {
+        .channels_min = 2,
+        .channels_max = 2,
+//      .rates = SNDRV_PCM_RATE_44100 | SNDRV_PCM_RATE_48000
+//      | SNDRV_PCM_RATE_88200 | SNDRV_PCM_RATE_96000
+//      | SNDRV_PCM_RATE_176400 | SNDRV_PCM_RATE_192000,
+        .rates = SNDRV_PCM_RATE_44100,
+        .formats = SNDRV_PCM_FMTBIT_S32_LE,
+    },
+    .ops = &holotr_dmalink_dai_ops,
+    .symmetric_rates = 1,
+};
+
+static const struct snd_soc_component_driver holotr_dmalink_component = {
+    .name = "holotr-dmalink",
+};
+
+static const struct regmap_config holotr_dmalink_regmap_data_config = {
+    .name = "holotr_dmalink.data",
+    .reg_bits = 32,
+    .reg_stride = 4,
+    .val_bits = 32,
+    .max_register = CMD_ADDR,
+};
+
+static const struct regmap_config holotr_dmalink_regmap_clk_config = {
+    .name = "holotr_dmalink.clk",
+    .reg_bits = 32,
+    .reg_stride = 4,
+    .val_bits = 32,
+    .max_register = CLK_CTRL2,
+};
+
+static int holotr_dmalink_probe(struct platform_device *pdev)
+{
+    struct resource *res, *res_clk;
+    struct holotr_dmalink *dmalink;
+    void __iomem *base;
+    int signature;
+    int ret;
+
+    dmalink = devm_kzalloc(&pdev->dev, sizeof(*dmalink), GFP_KERNEL);
+    if (!dmalink) {
+            dev_err(&pdev->dev, "Can't allocate holotr_dmalink\n");
+            return -ENOMEM;
+    }
+    platform_set_drvdata(pdev, dmalink);
+
+    res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+    if (!res) {
+            dev_err(&pdev->dev, "No memory resource\n");
+            return -ENODEV;
+    }
+    base = devm_ioremap_resource(&pdev->dev, res);
+    if (IS_ERR(base)) {
+            dev_err(&pdev->dev, "No ioremap resource\n");
+            return PTR_ERR(base);
+    }
+    printk(KERN_ALERT "holotr_dmalink at %08x\n", (int)base);
+
+    dmalink->regmap_data = devm_regmap_init_mmio(&pdev->dev, base,
+            &holotr_dmalink_regmap_data_config);
+    if (IS_ERR(dmalink->regmap_data)) {
+            dev_err(&pdev->dev, "No regmap_data\n");
+            return PTR_ERR(dmalink->regmap_data);
+    }
+
+    res_clk = platform_get_resource(pdev, IORESOURCE_MEM, 1);
+    if (!res_clk) {
+            dev_err(&pdev->dev, "No memory resource\n");
+            return -ENODEV;
+    }
+    base = devm_ioremap_resource(&pdev->dev, res_clk);
+    if (IS_ERR(base)) {
+            dev_err(&pdev->dev, "No ioremap resource\n");
+            return PTR_ERR(base);
+    }
+
+    dmalink->regmap_clk = devm_regmap_init_mmio(&pdev->dev, base,
+            &holotr_dmalink_regmap_clk_config);
+    if (IS_ERR(dmalink->regmap_clk)) {
+            dev_err(&pdev->dev, "No regmap_clk\n");
+            return PTR_ERR(dmalink->regmap_clk);
+    }
+/*
+    dmalink->clk48 = devm_clk_get(&pdev->dev, "clk48");
+    if (IS_ERR(dmalink->clk48)) {
+            dev_err(&pdev->dev, "No clk48 clock\n");
+            return PTR_ERR(dmalink->clk48);
+    }
+
+    ret = clk_prepare_enable(dmalink->clk48);
+    if (ret) {
+            dev_err(&pdev->dev, "Cannot enable clock\n");
+            return ret;
+    }
+*/
+    dmalink->clk44 = devm_clk_get(&pdev->dev, "clk44");
+    if (IS_ERR(dmalink->clk44)) {
+            dev_err(&pdev->dev, "No clk44 clock\n");
+            return PTR_ERR(dmalink->clk44);
+    }
+
+    ret = clk_prepare_enable(dmalink->clk44);
+    if (ret) {
+            dev_err(&pdev->dev, "Cannot enable clock\n");
+            return ret;
+    }
+
+//       dmalink->playback_dma_data.addr = res->start + DAC_FIFO_ADDR;
+//       dmalink->playback_dma_data.addr_width = 4;
+//       dmalink->playback_dma_data.maxburst = 1;
+    //dmalink->playback_dma_data.maxburst = 2;
+//       dev_dbg(&pdev->dev, "probe playback dma addr : %8x\n",
+//       dmalink->playback_dma_data.addr);
+
+    dmalink->capture_dma_data.addr = res->start + ADC_FIFO_ADDR;
+    dmalink->capture_dma_data.addr_width = 4;
+    dmalink->capture_dma_data.maxburst = 1;
+    //dmalink->capture_dma_data.maxburst = 2;
+
+/*
+    dmalink->ratnum.num = clk_get_rate(dmalink->clk_ref) / 2 / BITS_PER_FRAME;
+    dmalink->ratnum.den_step = 1;
+    dmalink->ratnum.den_min = 1;
+    dmalink->ratnum.den_max = 64;
+
+    dmalink->rate_constraints.rats = &dmalink->ratnum;
+    dmalink->rate_constraints.nrats = 1;
+*/
+
+    regmap_write(dmalink->regmap_data, CMD_ADDR, PB_FIFO_CLEAR | CAP_FIFO_CLEAR);
+    ret = regmap_read(dmalink->regmap_data, STATUS_ADDR, &signature);
+    if (ret) {
+        dev_err(&pdev->dev, "Cannot read signature\n");
+        printk(KERN_ALERT "holotr_dmalink probe signature : %4x\n", signature);
+        goto err_clk_disable;
+    }
+    dev_dbg(&pdev->dev, "probe signature : %4x\n", signature);
+
+    ret = devm_snd_soc_register_component(&pdev->dev, &holotr_dmalink_component,
+                                        &holotr_dmalink_dai, 1);
+    if (ret) {
+        dev_err(&pdev->dev, "Cannot register component\n");
+        goto err_clk_disable;
+    }
+
+    ret = devm_snd_dmaengine_pcm_register(&pdev->dev, NULL, 0);
+    if (ret) {
+        dev_err(&pdev->dev, "Cannot register dmaengine\n");
+        goto err_clk_disable;
+    }
+
+    dev_dbg(&pdev->dev, "probe finishing\n");
+    return ret;
+
+err_clk_disable:
+//       clk_disable_unprepare(dmalink->clk48);
+    clk_disable_unprepare(dmalink->clk44);
+    return ret;
+}
+
+static const struct of_device_id holotr_dmalink_of_match[] = {
+    { .compatible = "holotr,dmalink", },
+    {},
+};
+MODULE_DEVICE_TABLE(of, holotr_dmalink_of_match);
+
+static struct platform_driver holotr_dmalink_driver = {
+    .probe = holotr_dmalink_probe,
+    .driver = {
+        .name = "holotr-dmalink",
+//        .owner = THIS_MODULE,
+        .of_match_table = holotr_dmalink_of_match,
+    },
+};
+module_platform_driver(holotr_dmalink_driver);
+
+MODULE_AUTHOR("Michael Brown (the-snowwhite) <producer@holotronic.dk");
+MODULE_DESCRIPTION("DMA sound driver for soc at https://github.com/the-snowwhite");
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/socsynth/opencores_i2s.c b/sound/soc/socsynth/opencores_i2s.c
new file mode 100644
index 000000000000..1f4268c7387f
--- /dev/null
+++ b/sound/soc/socsynth/opencores_i2s.c
@@ -0,0 +1,436 @@
+/*
+ * Copyright (C) 2014 Bjarne Steinsbo <bsteinsbo@gmail.com>
+ * Largely based on axi-i2s.c by Lars-Peter Clausen.
+ *
+ * Licensed under the GPL-2.
+ */
+
+#include <linux/clk.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/regmap.h>
+#include <linux/slab.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include <sound/dmaengine_pcm.h>
+
+#define DAC_FIFO_ADDR	0x00
+#define STATUS_ADDR	0x04
+#define CMD_ADDR	0x08
+#define ADC_FIFO_ADDR	0x00
+
+/* Commands to register at CMD_ADDR */
+#define PB_FIFO_CLEAR	BIT(0)
+#define PB_ENABLE	BIT(1)
+#define CAP_FIFO_CLEAR	BIT(2)
+#define CAP_ENABLE	BIT(3)
+
+#define CLK_CTRL1	0x00
+#define CLK_CTRL2	0x04
+
+/* Bit-fields of clk control register 1 */
+#define CLK_MASTER_SLAVE  BIT(0)
+#define CLK_SEL_48_44	  BIT(1)
+#define MCLK_DIV_SHIFT	  (24)
+#define MCLK_DIV_MASK	  GENMASK(MCLK_DIV_SHIFT + 7, MCLK_DIV_SHIFT)
+#define BCLK_DIV_SHIFT	  (16)
+#define BCLK_DIV_MASK	  GENMASK(BCLK_DIV_SHIFT + 7, BCLK_DIV_SHIFT)
+/* Bit-fields of clk control register 2 */
+#define PB_LRC_DIV_SHIFT  (8)
+#define PB_LRC_DIV_MASK	  GENMASK(PB_LRC_DIV_SHIFT + 7, PB_LRC_DIV_SHIFT)
+#define CAP_LRC_DIV_SHIFT (0)
+#define CAP_LRC_DIV_MASK  GENMASK(CAP_LRC_DIV_SHIFT + 7, CAP_LRC_DIV_SHIFT)
+
+/* The frame size is not configurable */
+#define BITS_PER_FRAME 64
+
+struct opencores_i2s {
+	struct regmap *regmap_data;
+	struct regmap *regmap_clk;
+	struct clk *clk48;
+	struct clk *clk44;
+
+	struct snd_soc_dai_driver dai_driver;
+
+	struct snd_dmaengine_dai_dma_data capture_dma_data;
+	struct snd_dmaengine_dai_dma_data playback_dma_data;
+
+	struct snd_ratnum ratnum;
+	struct snd_pcm_hw_constraint_ratnums rate_constraints;
+};
+
+static int opencores_i2s_trigger(struct snd_pcm_substream *substream, int cmd,
+	struct snd_soc_dai *dai)
+{
+	struct opencores_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+	unsigned int mask, val;
+
+	if (substream->stream == SNDRV_PCM_STREAM_CAPTURE)
+		mask = CAP_ENABLE;
+	else
+		mask = PB_ENABLE;
+
+	switch (cmd) {
+	case SNDRV_PCM_TRIGGER_START:
+	case SNDRV_PCM_TRIGGER_RESUME:
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+		val = mask;
+		break;
+	case SNDRV_PCM_TRIGGER_STOP:
+	case SNDRV_PCM_TRIGGER_SUSPEND:
+	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+		val = 0;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	regmap_update_bits(i2s->regmap_data, CMD_ADDR, mask, val);
+//	regmap_write(i2s->regmap_data, CMD_ADDR, val);
+
+	dev_dbg(dai->dev, "trigger %x\n", val);
+	return 0;
+}
+
+static int divisor_value(unsigned long xtal_rate, unsigned long rate, int shift)
+{
+	return ((xtal_rate / rate / 2) >> shift) - 1;
+}
+
+static int opencores_i2s_hw_params(struct snd_pcm_substream *substream,
+	struct snd_pcm_hw_params *params, struct snd_soc_dai *dai)
+{
+	struct opencores_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+	unsigned long xtal_rate;
+	int lrclk_div;
+	int mclk_div;
+	int bclk_div;
+	int mask, val;
+	int mask2, val2;
+
+	dev_dbg(dai->dev, "hw_params fmt=0x%x\n", params_format(params));
+	dev_dbg(dai->dev, "hw_params rate=%d\n", params_rate(params));
+	if (params_format(params) != SNDRV_PCM_FORMAT_S32_LE)
+		return -EINVAL;
+
+	if ((params_rate(params) % 44100) == 0) {
+		val = CLK_SEL_48_44;
+		xtal_rate = clk_get_rate(i2s->clk44);
+		mclk_div = divisor_value(xtal_rate, 16934400, 0); /* fs*384 at 44.1kHz */
+	} else if ((params_rate(params) % 48000) == 0) {
+		val = 0;
+		xtal_rate = clk_get_rate(i2s->clk48);
+		mclk_div = divisor_value(xtal_rate, 12288000, 0); /* fs*256 at 48kHz */
+	} else
+		return -EINVAL;
+	mask = CLK_SEL_48_44;
+	mask2 = 0;
+
+	lrclk_div = divisor_value(xtal_rate, params_rate(params), 4);
+	bclk_div = divisor_value(xtal_rate, params_rate(params) * BITS_PER_FRAME, 0);
+	dev_dbg(dai->dev, "hw_params mclk_div=%d\n", mclk_div);
+	dev_dbg(dai->dev, "hw_params lrclk_div=%d\n", lrclk_div);
+	dev_dbg(dai->dev, "hw_params bclk_div=%d\n", bclk_div);
+	val |= mclk_div << MCLK_DIV_SHIFT;
+	mask |= MCLK_DIV_MASK;
+	val |= bclk_div << BCLK_DIV_SHIFT;
+	mask |= BCLK_DIV_MASK;
+	regmap_update_bits(i2s->regmap_clk, CLK_CTRL1, mask, val);
+	dev_dbg(dai->dev, "hw_params mask=0x%x val=0x%x\n", mask, val);
+	if (substream->stream == SNDRV_PCM_STREAM_CAPTURE) {
+		val2 = lrclk_div << CAP_LRC_DIV_SHIFT;
+		mask2 = CAP_LRC_DIV_MASK;
+	} else {
+		val2 = lrclk_div << PB_LRC_DIV_SHIFT;
+		mask2 = PB_LRC_DIV_MASK;
+	}
+	regmap_update_bits(i2s->regmap_clk, CLK_CTRL2, mask2, val2);
+	dev_dbg(dai->dev, "hw_params mask2=0x%x val2=0x%x\n", mask2, val2);
+	return 0;
+}
+
+static int opencores_i2s_set_fmt(struct snd_soc_dai *dai, unsigned int fmt)
+{
+	struct opencores_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+	int val = 0;
+	dev_dbg(dai->dev, "set_fmt 0x%x\n", fmt);
+
+	if ((fmt & SND_SOC_DAIFMT_FORMAT_MASK) != SND_SOC_DAIFMT_I2S)
+		return -EINVAL;
+
+	if ((fmt & SND_SOC_DAIFMT_INV_MASK) != SND_SOC_DAIFMT_NB_NF)
+		return -EINVAL;
+
+	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
+	case SND_SOC_DAIFMT_CBM_CFM:
+		val = 0;
+		break;
+	case SND_SOC_DAIFMT_CBS_CFS:
+		val = 1;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	dev_dbg(dai->dev, "set_fmt master=%d\n", val);
+	regmap_update_bits(i2s->regmap_clk, 0, CLK_MASTER_SLAVE, val);
+	return 0;
+}
+
+static int opencores_i2s_sysclk(struct snd_soc_dai *dai, int clk_id,
+	unsigned int freq, int dir)
+{
+	struct opencores_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+	int val = SND_SOC_CLOCK_IN ? 1 : 0;
+	dev_dbg(dai->dev, "sysclk id=%d freq=%d dir=%d\n", clk_id, freq, dir);
+	regmap_update_bits(i2s->regmap_clk, 0, CLK_MASTER_SLAVE, val);
+	return 0;
+}
+
+static void opencores_i2s_shutdown(struct snd_pcm_substream *substream,
+	struct snd_soc_dai *dai)
+{
+	struct opencores_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+	int mask;
+	int val;
+	dev_dbg(dai->dev, "shutdown\n");
+
+	if (substream->stream == SNDRV_PCM_STREAM_CAPTURE)
+		mask = CAP_ENABLE | CAP_FIFO_CLEAR;
+	else
+		mask = PB_ENABLE | PB_FIFO_CLEAR;
+	val = PB_FIFO_CLEAR | CAP_FIFO_CLEAR;
+	regmap_update_bits(i2s->regmap_data, CMD_ADDR, mask, val);
+}
+
+static int opencores_i2s_dai_probe(struct snd_soc_dai *dai)
+{
+	struct opencores_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+
+	dev_dbg(dai->dev, "dai_probe\n");
+	snd_soc_dai_init_dma_data(dai, &i2s->playback_dma_data,
+		&i2s->capture_dma_data);
+
+	return 0;
+}
+
+static const struct snd_soc_dai_ops opencores_i2s_dai_ops = {
+	.set_sysclk = opencores_i2s_sysclk,
+	// .set_pll
+	//.set_clkdiv = opencores_i2s_set_clkdiv,
+	// .set_bclk_ratio
+        .set_fmt = opencores_i2s_set_fmt,
+        // .xlate_tdm_slot_mask
+        // .set_tdm_slot
+        // .set_channel_map
+        // .set_tristate
+
+        // .digital_mute
+        // .mute_stream
+
+	//.startup = opencores_i2s_startup,
+	.shutdown = opencores_i2s_shutdown,
+	.hw_params = opencores_i2s_hw_params,
+	// .hw_free
+	// .prepare
+	.trigger = opencores_i2s_trigger,
+	// .bespoke_trigger
+	// .delay
+};
+
+static struct snd_soc_dai_driver opencores_i2s_dai = {
+	.probe = opencores_i2s_dai_probe,
+	.playback = {
+		.channels_min = 2,
+		.channels_max = 2,
+		.rates = SNDRV_PCM_RATE_44100 | SNDRV_PCM_RATE_48000
+			| SNDRV_PCM_RATE_88200 | SNDRV_PCM_RATE_96000
+			| SNDRV_PCM_RATE_176400 | SNDRV_PCM_RATE_192000,
+		.formats = SNDRV_PCM_FMTBIT_S32_LE,
+	},
+	.capture = {
+		.channels_min = 2,
+		.channels_max = 2,
+		.rates = SNDRV_PCM_RATE_44100 | SNDRV_PCM_RATE_48000
+			| SNDRV_PCM_RATE_88200 | SNDRV_PCM_RATE_96000
+			| SNDRV_PCM_RATE_176400 | SNDRV_PCM_RATE_192000,
+		.formats = SNDRV_PCM_FMTBIT_S32_LE,
+	},
+	.ops = &opencores_i2s_dai_ops,
+	.symmetric_rates = 1,
+};
+
+static const struct snd_soc_component_driver opencores_i2s_component = {
+	.name = "opencores-i2s",
+};
+
+static const struct regmap_config opencores_i2s_regmap_data_config = {
+	.name = "opencores_i2s.data",
+	.reg_bits = 32,
+	.reg_stride = 4,
+	.val_bits = 32,
+	.max_register = CMD_ADDR,
+};
+
+static const struct regmap_config opencores_i2s_regmap_clk_config = {
+	.name = "opencores_i2s.clk",
+	.reg_bits = 32,
+	.reg_stride = 4,
+	.val_bits = 32,
+	.max_register = CLK_CTRL2,
+};
+
+static int opencores_i2s_probe(struct platform_device *pdev)
+{
+	struct resource *res, *res_clk;
+	struct opencores_i2s *i2s;
+	void __iomem *base;
+	int signature;
+	int ret;
+
+	i2s = devm_kzalloc(&pdev->dev, sizeof(*i2s), GFP_KERNEL);
+	if (!i2s) {
+		dev_err(&pdev->dev, "Can't allocate opencores_i2s\n");
+		return -ENOMEM;
+	}
+	platform_set_drvdata(pdev, i2s);
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res) {
+		dev_err(&pdev->dev, "No memory resource\n");
+		return -ENODEV;
+	}
+	base = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(base)) {
+		dev_err(&pdev->dev, "No ioremap resource\n");
+		return PTR_ERR(base);
+	}
+	printk(KERN_ALERT "opencores_i2s at %08x\n", (int)base);
+
+	i2s->regmap_data = devm_regmap_init_mmio(&pdev->dev, base,
+		&opencores_i2s_regmap_data_config);
+	if (IS_ERR(i2s->regmap_data)) {
+		dev_err(&pdev->dev, "No regmap_data\n");
+		return PTR_ERR(i2s->regmap_data);
+	}
+
+	res_clk = platform_get_resource(pdev, IORESOURCE_MEM, 1);
+	if (!res_clk) {
+		dev_err(&pdev->dev, "No memory resource\n");
+		return -ENODEV;
+	}
+	base = devm_ioremap_resource(&pdev->dev, res_clk);
+	if (IS_ERR(base)) {
+		dev_err(&pdev->dev, "No ioremap resource\n");
+		return PTR_ERR(base);
+	}
+
+	i2s->regmap_clk = devm_regmap_init_mmio(&pdev->dev, base,
+		&opencores_i2s_regmap_clk_config);
+	if (IS_ERR(i2s->regmap_clk)) {
+		dev_err(&pdev->dev, "No regmap_clk\n");
+		return PTR_ERR(i2s->regmap_clk);
+	}
+
+	i2s->clk48 = devm_clk_get(&pdev->dev, "clk48");
+	if (IS_ERR(i2s->clk48)) {
+		dev_err(&pdev->dev, "No clk48 clock\n");
+		return PTR_ERR(i2s->clk48);
+	}
+
+	ret = clk_prepare_enable(i2s->clk48);
+	if (ret) {
+		dev_err(&pdev->dev, "Cannot enable clock\n");
+		return ret;
+	}
+
+	i2s->clk44 = devm_clk_get(&pdev->dev, "clk44");
+	if (IS_ERR(i2s->clk44)) {
+		dev_err(&pdev->dev, "No clk44 clock\n");
+		return PTR_ERR(i2s->clk44);
+	}
+
+	ret = clk_prepare_enable(i2s->clk44);
+	if (ret) {
+		dev_err(&pdev->dev, "Cannot enable clock\n");
+		return ret;
+	}
+
+	i2s->playback_dma_data.addr = res->start + DAC_FIFO_ADDR;
+	i2s->playback_dma_data.addr_width = 4;
+	i2s->playback_dma_data.maxburst = 1;
+	//i2s->playback_dma_data.maxburst = 2;
+	dev_dbg(&pdev->dev, "probe playback dma addr : %8x\n",
+		i2s->playback_dma_data.addr);
+
+	i2s->capture_dma_data.addr = res->start + ADC_FIFO_ADDR;
+	i2s->capture_dma_data.addr_width = 4;
+	i2s->capture_dma_data.maxburst = 1;
+	//i2s->capture_dma_data.maxburst = 2;
+
+/*
+	i2s->ratnum.num = clk_get_rate(i2s->clk_ref) / 2 / BITS_PER_FRAME;
+	i2s->ratnum.den_step = 1;
+	i2s->ratnum.den_min = 1;
+	i2s->ratnum.den_max = 64;
+
+	i2s->rate_constraints.rats = &i2s->ratnum;
+	i2s->rate_constraints.nrats = 1;
+*/
+
+	regmap_write(i2s->regmap_data, CMD_ADDR, PB_FIFO_CLEAR | CAP_FIFO_CLEAR);
+	ret = regmap_read(i2s->regmap_data, STATUS_ADDR, &signature);
+	if (ret) {
+		dev_err(&pdev->dev, "Cannot read signature\n");
+		printk(KERN_ALERT "opencores_i2s probe signature : %4x\n", signature);
+		goto err_clk_disable;
+	}
+	dev_dbg(&pdev->dev, "probe signature : %4x\n", signature);
+
+	ret = devm_snd_soc_register_component(&pdev->dev, &opencores_i2s_component,
+					 &opencores_i2s_dai, 1);
+	if (ret) {
+		dev_err(&pdev->dev, "Cannot register component\n");
+		goto err_clk_disable;
+	}
+
+	ret = devm_snd_dmaengine_pcm_register(&pdev->dev, NULL, 0);
+	if (ret) {
+		dev_err(&pdev->dev, "Cannot register dmaengine\n");
+		goto err_clk_disable;
+	}
+
+	dev_dbg(&pdev->dev, "probe finishing\n");
+	return ret;
+
+err_clk_disable:
+	clk_disable_unprepare(i2s->clk48);
+	clk_disable_unprepare(i2s->clk44);
+	return ret;
+}
+
+static const struct of_device_id opencores_i2s_of_match[] = {
+	{ .compatible = "opencores,i2s", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, opencores_i2s_of_match);
+
+static struct platform_driver opencores_i2s_driver = {
+	.driver = {
+		.name = "opencores-i2s",
+		.owner = THIS_MODULE,
+		.of_match_table = opencores_i2s_of_match,
+	},
+	.probe = opencores_i2s_probe,
+};
+module_platform_driver(opencores_i2s_driver);
+
+MODULE_AUTHOR("Bjarne Steinsbo <bsteinsbo@gmail.com>");
+MODULE_DESCRIPTION("I2S driver for core at https://github.com/bsteinsbo/i2s.git");
+MODULE_LICENSE("GPL");
-- 
2.17.1

