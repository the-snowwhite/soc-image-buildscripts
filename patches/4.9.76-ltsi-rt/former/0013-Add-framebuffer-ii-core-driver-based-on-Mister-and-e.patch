From ea682e9a715ee7962c92f0a0dd83e333809e12f4 Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Fri, 18 May 2018 20:35:35 +0200
Subject: [PATCH 13/33] Add framebuffer-ii core driver based on Mister, and
 enable it

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm/configs/socfpga_defconfig |   4 +-
 drivers/video/fbdev/Kconfig        |  48 ++--
 drivers/video/fbdev/Makefile       |   1 +
 drivers/video/fbdev/altvipfb.c     | 420 ++++++++++++++---------------
 drivers/video/fbdev/altvipfbii.c   | 260 ++++++++++++++++++
 5 files changed, 503 insertions(+), 230 deletions(-)
 create mode 100644 drivers/video/fbdev/altvipfbii.c

diff --git a/arch/arm/configs/socfpga_defconfig b/arch/arm/configs/socfpga_defconfig
index ad7ca9d21361..cb504b62a019 100644
--- a/arch/arm/configs/socfpga_defconfig
+++ b/arch/arm/configs/socfpga_defconfig
@@ -118,7 +118,9 @@ CONFIG_MFD_STMPE=y
 CONFIG_REGULATOR=y
 CONFIG_REGULATOR_FIXED_VOLTAGE=y
 CONFIG_FB=y
-CONFIG_FB_ALTERA_VIP_FB2_PLAT=m
+CONFIG_FB_ALTERA_VIP=y
+CONFIG_FB_ALTERA_VIP_II=y
+CONFIG_FB_ALTERA_VIP_FB2_PLAT=y
 CONFIG_FRAMEBUFFER_CONSOLE=y
 CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY=y
 CONFIG_USB=y
diff --git a/drivers/video/fbdev/Kconfig b/drivers/video/fbdev/Kconfig
index cf29ed5e40ca..d30601787b5d 100644
--- a/drivers/video/fbdev/Kconfig
+++ b/drivers/video/fbdev/Kconfig
@@ -238,6 +238,16 @@ config FB_ALTERA_VIP
 	  This driver supports the Altera Video and Image Processing(VIP)
 	  Frame Reader
 
+config FB_ALTERA_VIP_II
+	tristate "Altera VIP II Framebuffer support"
+	depends on FB
+	select FB_CFB_FILLRECT
+	select FB_CFB_COPYAREA
+	select FB_CFB_IMAGEBLIT
+	help
+	  This driver supports the Altera Video and Image Processing(VIP)
+	  Framebuffer II
+
 config FB_ALTERA_VIP_FB2
     tristate "Altera VIP Frame Buffer II framebuffer support"
 	depends on FB
@@ -725,7 +735,7 @@ config FB_STI
 	  BIOS routines contained in a ROM chip in HP PA-RISC based machines.
 	  Enabling this option will implement the linux framebuffer device
 	  using calls to the STI BIOS routines for initialisation.
-	
+
 	  If you enable this option, you will get a planar framebuffer device
 	  /dev/fb which will work on the most common HP graphic cards of the
 	  NGLE family, including the artist chips (in the 7xx and Bxxx series),
@@ -1159,36 +1169,36 @@ config FB_I810
 	select FB_CFB_IMAGEBLIT
 	select VGASTATE
 	help
-	  This driver supports the on-board graphics built in to the Intel 810 
+	  This driver supports the on-board graphics built in to the Intel 810
           and 815 chipsets.  Say Y if you have and plan to use such a board.
 
           To compile this driver as a module, choose M here: the
 	  module will be called i810fb.
 
-          For more information, please read 
+          For more information, please read
 	  <file:Documentation/fb/intel810.txt>
 
 config FB_I810_GTF
 	bool "use VESA Generalized Timing Formula"
 	depends on FB_I810
 	help
-	  If you say Y, then the VESA standard, Generalized Timing Formula 
+	  If you say Y, then the VESA standard, Generalized Timing Formula
           or GTF, will be used to calculate the required video timing values
-	  per video mode.  Since the GTF allows nondiscrete timings 
+	  per video mode.  Since the GTF allows nondiscrete timings
           (nondiscrete being a range of values as opposed to discrete being a
-          set of values), you'll be able to use any combination of horizontal 
+          set of values), you'll be able to use any combination of horizontal
 	  and vertical resolutions, and vertical refresh rates without having
 	  to specify your own timing parameters.  This is especially useful
-	  to maximize the performance of an aging display, or if you just 
-          have a display with nonstandard dimensions. A VESA compliant 
+	  to maximize the performance of an aging display, or if you just
+          have a display with nonstandard dimensions. A VESA compliant
 	  monitor is recommended, but can still work with non-compliant ones.
-	  If you need or want this, then select this option. The timings may 
-	  not be compliant with Intel's recommended values. Use at your own 
+	  If you need or want this, then select this option. The timings may
+	  not be compliant with Intel's recommended values. Use at your own
 	  risk.
 
-          If you say N, the driver will revert to discrete video timings 
+          If you say N, the driver will revert to discrete video timings
 	  using a set recommended by Intel in their documentation.
-  
+
           If unsure, say N.
 
 config FB_I810_I2C
@@ -1306,10 +1316,10 @@ config FB_MATROX_G
 	  G450/G550 secondary head and digital output are supported without
 	  additional modules.
 
-	  The driver starts in monitor mode. You must use the matroxset tool 
-	  (available at <ftp://platan.vc.cvut.cz/pub/linux/matrox-latest/>) to 
-	  swap primary and secondary head outputs, or to change output mode.  
-	  Secondary head driver always start in 640x480 resolution and you 
+	  The driver starts in monitor mode. You must use the matroxset tool
+	  (available at <ftp://platan.vc.cvut.cz/pub/linux/matrox-latest/>) to
+	  swap primary and secondary head outputs, or to change output mode.
+	  Secondary head driver always start in 640x480 resolution and you
 	  must use fbset to change it.
 
 	  Do not forget that second head supports only 16 and 32 bpp
@@ -1392,7 +1402,7 @@ config FB_RADEON_I2C
 	select FB_DDC
 	default y
 	help
-	  Say Y here if you want DDC/I2C support for your Radeon board. 
+	  Say Y here if you want DDC/I2C support for your Radeon board.
 
 config FB_RADEON_BACKLIGHT
 	bool "Support for backlight control"
@@ -1625,7 +1635,7 @@ config FB_NEOMAGIC
 	select VGASTATE
 	help
 	  This driver supports notebooks with NeoMagic PCI chips.
-	  Say Y if you have such a graphics card. 
+	  Say Y if you have such a graphics card.
 
 	  To compile this driver as a module, choose M here: the
 	  module will be called neofb.
@@ -1680,7 +1690,7 @@ config FB_VOODOO1
 	select FB_CFB_COPYAREA
 	select FB_CFB_IMAGEBLIT
 	---help---
-	  Say Y here if you have a 3Dfx Voodoo Graphics (Voodoo1/sst1) or 
+	  Say Y here if you have a 3Dfx Voodoo Graphics (Voodoo1/sst1) or
 	  Voodoo2 (cvg) based graphics card.
 
 	  To compile this driver as a module, choose M here: the
diff --git a/drivers/video/fbdev/Makefile b/drivers/video/fbdev/Makefile
index bb8f9d0ac6b3..5951a8f70640 100644
--- a/drivers/video/fbdev/Makefile
+++ b/drivers/video/fbdev/Makefile
@@ -11,6 +11,7 @@ obj-$(CONFIG_FB_WMT_GE_ROPS)   += wmt_ge_rops.o
 
 # Hardware specific drivers go first
 obj-$(CONFIG_FB_ALTERA_VIP)	  += altvipfb.o
+obj-$(CONFIG_FB_ALTERA_VIP_II)	  += altvipfbii.o
 obj-$(CONFIG_FB_ALTERA_VIP_FB2) += altvipfb2.o
 obj-$(CONFIG_FB_ALTERA_VIP_FB2_PLAT) += altvipfb2_drv.o
 altvipfb2_drv-objs := altvipfb2-plat.o altvipfb2.o
diff --git a/drivers/video/fbdev/altvipfb.c b/drivers/video/fbdev/altvipfb.c
index b247858ba43a..4724a0e975e5 100644
--- a/drivers/video/fbdev/altvipfb.c
+++ b/drivers/video/fbdev/altvipfb.c
@@ -41,260 +41,260 @@
 struct altvipfb_type;
 
 struct altvipfb_dev {
-	struct platform_device *pdev;
-	struct fb_info info;
-	struct resource *reg_res;
-	void __iomem *base;
-	int mem_word_width;
-	u32 pseudo_palette[PALETTE_SIZE];
+    struct platform_device *pdev;
+    struct fb_info info;
+    struct resource *reg_res;
+    void __iomem *base;
+    int mem_word_width;
+    u32 pseudo_palette[PALETTE_SIZE];
 };
 
 static int altvipfb_setcolreg(unsigned regno, unsigned red, unsigned green,
-			   unsigned blue, unsigned transp, struct fb_info *info)
+                              unsigned blue, unsigned transp, struct fb_info *info)
 {
-	/*
-	 *  Set a single color register. The values supplied have a 32 bit
-	 *  magnitude.
-	 *  Return != 0 for invalid regno.
-	 */
+    /*
+     *  Set a single color register. The values supplied have a 32 bit
+     *  magnitude.
+     *  Return != 0 for invalid regno.
+     */
 
-	if (regno > 255)
-		return 1;
+    if (regno > 255)
+        return 1;
 
-	red >>= 8;
-	green >>= 8;
-	blue >>= 8;
+    red >>= 8;
+    green >>= 8;
+    blue >>= 8;
 
-	if (regno < 255) {
-		((u32 *)info->pseudo_palette)[regno] =
-		((red & 255) << 16) | ((green & 255) << 8) | (blue & 255);
-	}
+    if (regno < 255) {
+        ((u32 *)info->pseudo_palette)[regno] =
+        ((red & 255) << 16) | ((green & 255) << 8) | (blue & 255);
+    }
 
-	return 0;
+    return 0;
 }
 
 static struct fb_ops altvipfb_ops = {
-	.owner = THIS_MODULE,
-	.fb_fillrect = cfb_fillrect,
-	.fb_copyarea = cfb_copyarea,
-	.fb_imageblit = cfb_imageblit,
-	.fb_setcolreg = altvipfb_setcolreg,
+    .owner = THIS_MODULE,
+    .fb_fillrect = cfb_fillrect,
+    .fb_copyarea = cfb_copyarea,
+    .fb_imageblit = cfb_imageblit,
+    .fb_setcolreg = altvipfb_setcolreg,
 };
 
 static int altvipfb_of_setup(struct altvipfb_dev *fbdev)
 {
-	struct device_node *np = fbdev->pdev->dev.of_node;
-	int ret;
-	u32 bits_per_color;
-
-	ret = of_property_read_u32(np, "max-width", &fbdev->info.var.xres);
-	if (ret) {
-		dev_err(&fbdev->pdev->dev,
-			"Missing required parameter 'max-width'");
-		return ret;
-	}
-	fbdev->info.var.xres_virtual = fbdev->info.var.xres,
-
-	ret = of_property_read_u32(np, "max-height", &fbdev->info.var.yres);
-	if (ret) {
-		dev_err(&fbdev->pdev->dev,
-			"Missing required parameter 'max-height'");
-		return ret;
-	}
-	fbdev->info.var.yres_virtual = fbdev->info.var.yres;
-
-	ret = of_property_read_u32(np, "bits-per-color", &bits_per_color);
-	if (ret) {
-		dev_err(&fbdev->pdev->dev,
-			"Missing required parameter 'bits-per-color'");
-		return ret;
-	}
-	if (bits_per_color != 8) {
-		dev_err(&fbdev->pdev->dev,
-			"bits-per-color is set to %i.  Curently only 8 is supported.",
-			bits_per_color);
-		return -ENODEV;
-	}
-	fbdev->info.var.bits_per_pixel = 32;
-
-	ret = of_property_read_u32(np, "mem-word-width",
-				   &fbdev->mem_word_width);
-	if (ret) {
-		dev_err(&fbdev->pdev->dev,
-			"Missing required parameter 'mem-word-width'");
-		return ret;
-	}
-	if (!(fbdev->mem_word_width >= 32 && fbdev->mem_word_width % 32 == 0)) {
-		dev_err(&fbdev->pdev->dev,
-			"mem-word-width is set to %i.  must be >= 32 and multiple of 32.",
-			fbdev->mem_word_width);
-		return -ENODEV;
-	}
-
-	return 0;
+    struct device_node *np = fbdev->pdev->dev.of_node;
+    int ret;
+    u32 bits_per_color;
+
+    ret = of_property_read_u32(np, "max-width", &fbdev->info.var.xres);
+    if (ret) {
+        dev_err(&fbdev->pdev->dev,
+                "Missing required parameter 'max-width'");
+        return ret;
+    }
+    fbdev->info.var.xres_virtual = fbdev->info.var.xres,
+
+    ret = of_property_read_u32(np, "max-height", &fbdev->info.var.yres);
+    if (ret) {
+        dev_err(&fbdev->pdev->dev,
+                "Missing required parameter 'max-height'");
+        return ret;
+    }
+    fbdev->info.var.yres_virtual = fbdev->info.var.yres;
+
+    ret = of_property_read_u32(np, "bits-per-color", &bits_per_color);
+    if (ret) {
+        dev_err(&fbdev->pdev->dev,
+                "Missing required parameter 'bits-per-color'");
+        return ret;
+    }
+    if (bits_per_color != 8) {
+        dev_err(&fbdev->pdev->dev,
+                "bits-per-color is set to %i.  Curently only 8 is supported.",
+                bits_per_color);
+        return -ENODEV;
+    }
+    fbdev->info.var.bits_per_pixel = 32;
+
+    ret = of_property_read_u32(np, "mem-word-width",
+                               &fbdev->mem_word_width);
+    if (ret) {
+        dev_err(&fbdev->pdev->dev,
+                "Missing required parameter 'mem-word-width'");
+        return ret;
+    }
+    if (!(fbdev->mem_word_width >= 32 && fbdev->mem_word_width % 32 == 0)) {
+        dev_err(&fbdev->pdev->dev,
+                "mem-word-width is set to %i.  must be >= 32 and multiple of 32.",
+                fbdev->mem_word_width);
+        return -ENODEV;
+    }
+
+    return 0;
 }
 
 static void altvipfb_start_hw(struct altvipfb_dev *fbdev)
 {
-	writel(fbdev->info.fix.smem_start, fbdev->base +
-	       ALTVIPFB_FRAME0_BASE_ADDRESS);
-	writel(fbdev->info.var.xres * fbdev->info.var.yres /
-	       (fbdev->mem_word_width/32),
-	       fbdev->base + ALTVIPFB_FRAME0_NUM_WORDS);
-	writel(fbdev->info.var.xres * fbdev->info.var.yres,
-	       fbdev->base + ALTVIPFB_FRAME0_SAMPLES);
-	writel(fbdev->info.var.xres, fbdev->base + ALTVIPFB_FRAME0_WIDTH);
-	writel(fbdev->info.var.yres, fbdev->base + ALTVIPFB_FRAME0_HEIGHT);
-	writel(3, fbdev->base + ALTVIPFB_FRAME0_INTERLACED);
-	writel(0, fbdev->base + ALTVIPFB_FRAME_SELECT);
-
-	/* Finally set the control register to 1 to start streaming */
-	writel(1, fbdev->base + ALTVIPFB_CONTROL);
+    writel(fbdev->info.fix.smem_start, fbdev->base +
+    ALTVIPFB_FRAME0_BASE_ADDRESS);
+    writel(fbdev->info.var.xres * fbdev->info.var.yres /
+    (fbdev->mem_word_width/32),
+           fbdev->base + ALTVIPFB_FRAME0_NUM_WORDS);
+    writel(fbdev->info.var.xres * fbdev->info.var.yres,
+           fbdev->base + ALTVIPFB_FRAME0_SAMPLES);
+    writel(fbdev->info.var.xres, fbdev->base + ALTVIPFB_FRAME0_WIDTH);
+    writel(fbdev->info.var.yres, fbdev->base + ALTVIPFB_FRAME0_HEIGHT);
+    writel(3, fbdev->base + ALTVIPFB_FRAME0_INTERLACED);
+    writel(0, fbdev->base + ALTVIPFB_FRAME_SELECT);
+
+    /* Finally set the control register to 1 to start streaming */
+    writel(1, fbdev->base + ALTVIPFB_CONTROL);
 }
 
 static void altvipfb_disable_hw(struct altvipfb_dev *fbdev)
 {
-	/* set the control register to 0 to stop streaming */
-	writel(0, fbdev->base + ALTVIPFB_CONTROL);
+    /* set the control register to 0 to stop streaming */
+    writel(0, fbdev->base + ALTVIPFB_CONTROL);
 }
 
 
 static int altvipfb_setup_fb_info(struct altvipfb_dev *fbdev)
 {
-	struct fb_info *info = &fbdev->info;
-	int ret;
-
-	strcpy(info->fix.id, DRIVER_NAME);
-	info->fix.type = FB_TYPE_PACKED_PIXELS;
-	info->fix.visual = FB_VISUAL_TRUECOLOR;
-	info->fix.accel = FB_ACCEL_NONE;
-
-	info->fbops = &altvipfb_ops;
-	info->var.activate = FB_ACTIVATE_NOW;
-	info->var.height = -1;
-	info->var.width = -1;
-	info->var.vmode = FB_VMODE_NONINTERLACED;
-
-	ret = altvipfb_of_setup(fbdev);
-	if (ret)
-		return ret;
-
-	/* settings for 32bit pixels */
-	info->var.red.offset = 16;
-	info->var.red.length = 8;
-	info->var.red.msb_right = 0;
-	info->var.green.offset = 8;
-	info->var.green.length = 8;
-	info->var.green.msb_right = 0;
-	info->var.blue.offset = 0;
-	info->var.blue.length = 8;
-	info->var.blue.msb_right = 0;
-
-	info->fix.line_length = (info->var.xres *
-		(info->var.bits_per_pixel >> 3));
-	info->fix.smem_len = info->fix.line_length * info->var.yres;
-
-	info->pseudo_palette = fbdev->pseudo_palette;
-	info->flags = FBINFO_FLAG_DEFAULT;
-
-	return 0;
+    struct fb_info *info = &fbdev->info;
+    int ret;
+
+    strcpy(info->fix.id, DRIVER_NAME);
+    info->fix.type = FB_TYPE_PACKED_PIXELS;
+    info->fix.visual = FB_VISUAL_TRUECOLOR;
+    info->fix.accel = FB_ACCEL_NONE;
+
+    info->fbops = &altvipfb_ops;
+    info->var.activate = FB_ACTIVATE_NOW;
+    info->var.height = -1;
+    info->var.width = -1;
+    info->var.vmode = FB_VMODE_NONINTERLACED;
+
+    ret = altvipfb_of_setup(fbdev);
+    if (ret)
+        return ret;
+
+    /* settings for 32bit pixels */
+    info->var.red.offset = 16;
+    info->var.red.length = 8;
+    info->var.red.msb_right = 0;
+    info->var.green.offset = 8;
+    info->var.green.length = 8;
+    info->var.green.msb_right = 0;
+    info->var.blue.offset = 0;
+    info->var.blue.length = 8;
+    info->var.blue.msb_right = 0;
+
+    info->fix.line_length = (info->var.xres *
+    (info->var.bits_per_pixel >> 3));
+    info->fix.smem_len = info->fix.line_length * info->var.yres;
+
+    info->pseudo_palette = fbdev->pseudo_palette;
+    info->flags = FBINFO_FLAG_DEFAULT;
+
+    return 0;
 }
 
 static int altvipfb_probe(struct platform_device *pdev)
 {
-	int retval;
-	void *fbmem_virt;
-	struct altvipfb_dev *fbdev;
-
-	fbdev = devm_kzalloc(&pdev->dev, sizeof(*fbdev), GFP_KERNEL);
-	if (!fbdev)
-		return -ENOMEM;
-
-	fbdev->pdev = pdev;
-	fbdev->reg_res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	if (!fbdev->reg_res)
-		return -ENODEV;
-
-	retval = altvipfb_setup_fb_info(fbdev);
-
-	fbmem_virt = dma_alloc_coherent(NULL,
-					fbdev->info.fix.smem_len,
-					(void *)&(fbdev->info.fix.smem_start),
-					GFP_KERNEL);
-	if (!fbmem_virt) {
-		dev_err(&pdev->dev,
-			"altvipfb: unable to allocate %d Bytes fb memory\n",
-			fbdev->info.fix.smem_len);
-		return retval;
-	}
-
-	fbdev->info.screen_base = fbmem_virt;
-
-	retval = fb_alloc_cmap(&fbdev->info.cmap, PALETTE_SIZE, 0);
-	if (retval < 0)
-		goto err_dma_free;
-
-	platform_set_drvdata(pdev, fbdev);
-
-	fbdev->base = devm_ioremap_resource(&pdev->dev, fbdev->reg_res);
-	if (IS_ERR(fbdev->base)) {
-		dev_err(&pdev->dev, "devm_ioremap_resource failed\n");
-		retval = PTR_ERR(fbdev->base);
-		goto err_dealloc_cmap;
-	}
-
-	altvipfb_start_hw(fbdev);
-
-	retval = register_framebuffer(&fbdev->info);
-	if (retval < 0)
-		goto err_dealloc_cmap;
-
-	dev_info(&pdev->dev, "fb%d: %s frame buffer device at 0x%x+0x%x\n",
-		 fbdev->info.node, fbdev->info.fix.id,
-		 (unsigned)fbdev->info.fix.smem_start,
-		 fbdev->info.fix.smem_len);
-
-	return 0;
-
-err_dealloc_cmap:
-	fb_dealloc_cmap(&fbdev->info.cmap);
-err_dma_free:
-	dma_free_coherent(NULL, fbdev->info.fix.smem_len, fbmem_virt,
-			  fbdev->info.fix.smem_start);
-	return retval;
+    int retval;
+    void *fbmem_virt;
+    struct altvipfb_dev *fbdev;
+
+    fbdev = devm_kzalloc(&pdev->dev, sizeof(*fbdev), GFP_KERNEL);
+    if (!fbdev)
+        return -ENOMEM;
+
+    fbdev->pdev = pdev;
+    fbdev->reg_res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+    if (!fbdev->reg_res)
+        return -ENODEV;
+
+    retval = altvipfb_setup_fb_info(fbdev);
+
+    fbmem_virt = dma_alloc_coherent(NULL,
+                                    fbdev->info.fix.smem_len,
+                                    (void *)&(fbdev->info.fix.smem_start),
+                                    GFP_KERNEL);
+    if (!fbmem_virt) {
+        dev_err(&pdev->dev,
+                "altvipfb: unable to allocate %d Bytes fb memory\n",
+                fbdev->info.fix.smem_len);
+        return retval;
+    }
+
+    fbdev->info.screen_base = fbmem_virt;
+
+    retval = fb_alloc_cmap(&fbdev->info.cmap, PALETTE_SIZE, 0);
+    if (retval < 0)
+        goto err_dma_free;
+
+    platform_set_drvdata(pdev, fbdev);
+
+    fbdev->base = devm_ioremap_resource(&pdev->dev, fbdev->reg_res);
+    if (IS_ERR(fbdev->base)) {
+        dev_err(&pdev->dev, "devm_ioremap_resource failed\n");
+        retval = PTR_ERR(fbdev->base);
+        goto err_dealloc_cmap;
+    }
+
+    altvipfb_start_hw(fbdev);
+
+    retval = register_framebuffer(&fbdev->info);
+    if (retval < 0)
+        goto err_dealloc_cmap;
+
+    dev_info(&pdev->dev, "fb%d: %s frame buffer device at 0x%x+0x%x\n",
+             fbdev->info.node, fbdev->info.fix.id,
+             (unsigned)fbdev->info.fix.smem_start,
+             fbdev->info.fix.smem_len);
+
+    return 0;
+
+    err_dealloc_cmap:
+    fb_dealloc_cmap(&fbdev->info.cmap);
+    err_dma_free:
+    dma_free_coherent(NULL, fbdev->info.fix.smem_len, fbmem_virt,
+                      fbdev->info.fix.smem_start);
+    return retval;
 }
 
 static int altvipfb_remove(struct platform_device *dev)
 {
-	struct altvipfb_dev *fbdev = platform_get_drvdata(dev);
-
-	if (fbdev) {
-		unregister_framebuffer(&fbdev->info);
-		fb_dealloc_cmap(&fbdev->info.cmap);
-		dma_free_coherent(NULL, fbdev->info.fix.smem_len,
-				  fbdev->info.screen_base,
-				  fbdev->info.fix.smem_start);
-		altvipfb_disable_hw(fbdev);
-	}
-	return 0;
+    struct altvipfb_dev *fbdev = platform_get_drvdata(dev);
+
+    if (fbdev) {
+        unregister_framebuffer(&fbdev->info);
+        fb_dealloc_cmap(&fbdev->info.cmap);
+        dma_free_coherent(NULL, fbdev->info.fix.smem_len,
+                          fbdev->info.screen_base,
+                          fbdev->info.fix.smem_start);
+        altvipfb_disable_hw(fbdev);
+    }
+    return 0;
 }
 
 
 static struct of_device_id altvipfb_match[] = {
-	{ .compatible = "altr,vip-frame-reader-1.0" },
-	{ .compatible = "altr,vip-frame-reader-9.1" },
-	{},
+    { .compatible = "altr,vip-frame-reader-1.0" },
+    { .compatible = "altr,vip-frame-reader-9.1" },
+    {},
 };
 MODULE_DEVICE_TABLE(of, altvipfb_match);
 
 static struct platform_driver altvipfb_driver = {
-	.probe = altvipfb_probe,
-	.remove = altvipfb_remove,
-	.driver = {
-		.owner = THIS_MODULE,
-		.name = DRIVER_NAME,
-		.of_match_table = altvipfb_match,
-	},
+    .probe = altvipfb_probe,
+    .remove = altvipfb_remove,
+    .driver = {
+        .owner = THIS_MODULE,
+        .name = DRIVER_NAME,
+        .of_match_table = altvipfb_match,
+    },
 };
 module_platform_driver(altvipfb_driver);
 
diff --git a/drivers/video/fbdev/altvipfbii.c b/drivers/video/fbdev/altvipfbii.c
new file mode 100644
index 000000000000..a80ae1a714f7
--- /dev/null
+++ b/drivers/video/fbdev/altvipfbii.c
@@ -0,0 +1,260 @@
+/*
+ *  altvipfb.c -- Altera Video and Image Processing(VIP) Frame Reader driver
+ *
+ *  This is based on a driver made by Thomas Chou <thomas@wytron.com.tw> and
+ *  Walter Goossens <waltergoossens@home.nl> This driver supports the Altera VIP
+ *  Frame Reader component.  More info on the hardware can be found in
+ *  the Altera Video and Image Processing Suite User Guide at this address
+ *  http://www.altera.com/literature/ug/ug_vip.pdf.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ */
+
+#include <linux/dma-mapping.h>
+#include <linux/fb.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+
+#define PALETTE_SIZE	256
+#define DRIVER_NAME	"altvipfbii"
+
+/* control registers */
+#define ALTVIPFB_CONTROL		0
+#define ALTVIPFB_FRAMEINFO		20
+#define ALTVIPFB_FRAMEADDR		24
+
+struct altvipfb_type;
+
+struct altvipfb_dev {
+    struct platform_device *pdev;
+    struct fb_info info;
+    struct resource *reg_res;
+    void __iomem *base;
+    u32 pseudo_palette[PALETTE_SIZE];
+};
+
+static int altvipfb_setcolreg(unsigned regno, unsigned red, unsigned green,
+                              unsigned blue, unsigned transp, struct fb_info *info)
+{
+    /*
+     *  Set a single color register. The values supplied have a 32 bit
+     *  magnitude.
+     *  Return != 0 for invalid regno.
+     */
+
+    if (regno > 255)
+        return 1;
+
+    red >>= 8;
+    green >>= 8;
+    blue >>= 8;
+
+    if (regno < 255) {
+        ((u32 *)info->pseudo_palette)[regno] =
+        ((red & 255) << 16) | ((green & 255) << 8) | (blue & 255);
+    }
+
+    return 0;
+}
+
+static struct fb_ops altvipfb_ops = {
+    .owner = THIS_MODULE,
+    .fb_fillrect = cfb_fillrect,
+    .fb_copyarea = cfb_copyarea,
+    .fb_imageblit = cfb_imageblit,
+    .fb_setcolreg = altvipfb_setcolreg,
+};
+
+static void altvipfb_start_hw(struct altvipfb_dev *fbdev)
+{
+    writel(1, fbdev->base + ALTVIPFB_CONTROL);
+    writel((fbdev->info.var.xres & 0xFFF) | ((fbdev->info.var.yres & 0xFFF) << 13), fbdev->base + ALTVIPFB_FRAMEINFO);
+    writel(fbdev->info.fix.smem_start, fbdev->base + ALTVIPFB_FRAMEADDR);
+}
+
+static void altvipfb_disable_hw(struct altvipfb_dev *fbdev)
+{
+    /* set the control register to 0 to stop streaming */
+    writel(0, fbdev->base + ALTVIPFB_CONTROL);
+}
+
+static int altvipfb_setup_fb_info(struct altvipfb_dev *fbdev)
+{
+    struct fb_info *info = &fbdev->info;
+    struct device_node *np = fbdev->pdev->dev.of_node;
+
+    int ret;
+
+    //     u32 width = readl(fbdev->base + 0x80);
+    //     u32 height = readl(fbdev->base + 0x88);
+    //     info->var.xres = (((width>>12)&0xf)*1000) + (((width>>8)&0xf)*100) + (((width>>4)&0xf)*10) + (width&0xf);
+    //     info->var.yres = (((height>>12)&0xf)*1000) + (((height>>8)&0xf)*100) + (((height>>4)&0xf)*10) + (height&0xf);
+
+    ret = of_property_read_u32(np, "max-width", &fbdev->info.var.xres);
+    if (ret) {
+        dev_err(&fbdev->pdev->dev,
+                "Missing required parameter 'max-width'");
+        return ret;
+    }
+
+    ret = of_property_read_u32(np, "max-height", &fbdev->info.var.yres);
+    if (ret) {
+        dev_err(&fbdev->pdev->dev,
+                "Missing required parameter 'max-height'");
+        return ret;
+    }
+
+    strcpy(info->fix.id, DRIVER_NAME);
+    info->fix.type = FB_TYPE_PACKED_PIXELS;
+    info->fix.visual = FB_VISUAL_TRUECOLOR;
+    info->fix.accel = FB_ACCEL_NONE;
+
+    info->fbops = &altvipfb_ops;
+    info->var.activate = FB_ACTIVATE_NOW;
+    info->var.height = -1;
+    info->var.width = -1;
+    info->var.vmode = FB_VMODE_NONINTERLACED;
+
+    info->var.xres_virtual = info->var.xres,
+    info->var.yres_virtual = info->var.yres;
+    info->var.bits_per_pixel = 32;
+
+    dev_info(&fbdev->pdev->dev, "FB width = %u, FB height = %u\n", info->var.xres, info->var.yres);
+
+    /* settings for 32bit pixels */
+    info->var.red.offset = 16;
+    info->var.red.length = 8;
+    info->var.red.msb_right = 0;
+    info->var.green.offset = 8;
+    info->var.green.length = 8;
+    info->var.green.msb_right = 0;
+    info->var.blue.offset = 0;
+    info->var.blue.length = 8;
+    info->var.blue.msb_right = 0;
+
+    info->fix.line_length = (info->var.xres *
+    (info->var.bits_per_pixel >> 3));
+    info->fix.smem_len = info->fix.line_length * info->var.yres;
+
+    info->pseudo_palette = fbdev->pseudo_palette;
+    info->flags = FBINFO_FLAG_DEFAULT;
+
+    return 0;
+}
+
+static int altvipfb_probe(struct platform_device *pdev)
+{
+    int retval;
+    void *fbmem_virt;
+    struct altvipfb_dev *fbdev;
+
+    fbdev = devm_kzalloc(&pdev->dev, sizeof(*fbdev), GFP_KERNEL);
+    if (!fbdev)
+        return -ENOMEM;
+
+    fbdev->pdev = pdev;
+    fbdev->reg_res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+    if (!fbdev->reg_res)
+        return -ENODEV;
+
+    //     fbdev->base = devm_ioremap_resource(&pdev->dev, fbdev->reg_res);
+    //     if (IS_ERR(fbdev->base)) {
+    //         dev_err(&pdev->dev, "devm_ioremap_resource failed\n");
+    //         return PTR_ERR(fbdev->base);
+    //     }
+
+    retval = altvipfb_setup_fb_info(fbdev);
+
+    fbmem_virt = dma_alloc_coherent(NULL,
+                                    fbdev->info.fix.smem_len,
+                                    (void *)&(fbdev->info.fix.smem_start),
+                                    GFP_KERNEL);
+    if (!fbmem_virt) {
+        dev_err(&pdev->dev,
+                "altvipfb: unable to allocate %d Bytes fb memory\n",
+                fbdev->info.fix.smem_len);
+        return retval;
+    }
+
+    fbdev->info.screen_base = fbmem_virt;
+
+    retval = fb_alloc_cmap(&fbdev->info.cmap, PALETTE_SIZE, 0);
+    if (retval < 0)
+        goto err_dma_free;
+
+    platform_set_drvdata(pdev, fbdev);
+
+    fbdev->base = devm_ioremap_resource(&pdev->dev, fbdev->reg_res);
+    if (IS_ERR(fbdev->base)) {
+        dev_err(&pdev->dev, "devm_ioremap_resource failed\n");
+        retval = PTR_ERR(fbdev->base);
+        goto err_dealloc_cmap;
+    }
+
+    altvipfb_start_hw(fbdev);
+
+    retval = register_framebuffer(&fbdev->info);
+    if (retval < 0)
+        goto err_dealloc_cmap;
+
+    dev_info(&pdev->dev, "fb%d: %s frame buffer device at 0x%x+0x%x\n",
+             fbdev->info.node, fbdev->info.fix.id,
+             (unsigned)fbdev->info.fix.smem_start,
+             fbdev->info.fix.smem_len);
+
+    return 0;
+
+    err_dealloc_cmap:
+    fb_dealloc_cmap(&fbdev->info.cmap);
+    err_dma_free:
+    dma_free_coherent(NULL, fbdev->info.fix.smem_len, fbmem_virt,
+                      fbdev->info.fix.smem_start);
+    return retval;
+}
+
+static int altvipfb_remove(struct platform_device *dev)
+{
+    struct altvipfb_dev *fbdev = platform_get_drvdata(dev);
+
+    if (fbdev) {
+        unregister_framebuffer(&fbdev->info);
+        fb_dealloc_cmap(&fbdev->info.cmap);
+        dma_free_coherent(NULL, fbdev->info.fix.smem_len,
+                          fbdev->info.screen_base,
+                          fbdev->info.fix.smem_start);
+        altvipfb_disable_hw(fbdev);
+    }
+    return 0;
+}
+
+
+static struct of_device_id altvipfb_match[] = {
+    { .compatible = "altr,vip-frame-buffer-ii-2.0" },
+    {},
+};
+MODULE_DEVICE_TABLE(of, altvipfb_match);
+
+static struct platform_driver altvipfb_driver = {
+    .probe = altvipfb_probe,
+    .remove = altvipfb_remove,
+    .driver = {
+        .owner = THIS_MODULE,
+        .name = DRIVER_NAME,
+        .of_match_table = altvipfb_match,
+    },
+};
+module_platform_driver(altvipfb_driver);
+
+MODULE_DESCRIPTION("Altera VIP Frame Reader framebuffer driver");
+MODULE_AUTHOR("Chris Rauer <crauer@altera.com>");
+MODULE_LICENSE("GPL v2");
-- 
2.17.1

