From 2b5025db0e84d2515adee97dd958e207fcc9d467 Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Thu, 17 May 2018 10:58:21 +0200
Subject: [PATCH 15/34] Add Hsynth audio driver with Phat(pcm5102) audio output
 Add vipii fb,pidac/hsynth audio dtb for DE10 Nano HD HDMI

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm/boot/dts/Makefile                    |   1 +
 ...pga_cyclone5_de10_nano_uio_aud_fbii_hd.dts | 261 +++++++++++
 arch/arm/configs/socfpga_defconfig            |   1 +
 sound/soc/codecs/Kconfig                      |   5 +-
 sound/soc/codecs/Makefile                     |   2 +
 sound/soc/codecs/hsynthpcm5102.c              | 124 +++++
 sound/soc/socsynth/Kconfig                    |   7 +-
 sound/soc/socsynth/Makefile                   |   3 +
 sound/soc/socsynth/pcm5102-hsynth.c           | 438 ++++++++++++++++++
 9 files changed, 840 insertions(+), 2 deletions(-)
 create mode 100644 arch/arm/boot/dts/socfpga_cyclone5_de10_nano_uio_aud_fbii_hd.dts
 create mode 100644 sound/soc/codecs/hsynthpcm5102.c
 create mode 100644 sound/soc/socsynth/pcm5102-hsynth.c

diff --git a/arch/arm/boot/dts/Makefile b/arch/arm/boot/dts/Makefile
index 3ddb76dff383..b80aa1c22d5d 100644
--- a/arch/arm/boot/dts/Makefile
+++ b/arch/arm/boot/dts/Makefile
@@ -702,6 +702,7 @@ dtb-$(CONFIG_ARCH_SOCFPGA) += \
 	socfpga_cyclone5_de0_sockit.dtb \
 	socfpga_cyclone5_de10_nano_uio_fb.dtb \
 	socfpga_cyclone5_de10_nano_uio_fb_hd.dtb \
+	socfpga_cyclone5_de10_nano_uio_aud_fbii_hd.dtb \
 	socfpga_cyclone5_de10_nano.dtb \
 	socfpga_cyclone5_de1_soc.dtb \
 	socfpga_cyclone5_sockit.dtb \
diff --git a/arch/arm/boot/dts/socfpga_cyclone5_de10_nano_uio_aud_fbii_hd.dts b/arch/arm/boot/dts/socfpga_cyclone5_de10_nano_uio_aud_fbii_hd.dts
new file mode 100644
index 000000000000..7e1acf94ba6b
--- /dev/null
+++ b/arch/arm/boot/dts/socfpga_cyclone5_de10_nano_uio_aud_fbii_hd.dts
@@ -0,0 +1,261 @@
+/*
+* Copyright Intel Corporation (C) 2017. All rights reserved.
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms and conditions of the GNU General Public License,
+* version 2, as published by the Free Software Foundation.
+*
+* This program is distributed in the hope it will be useful, but WITHOUT
+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+* more details.
+*
+* You should have received a copy of the GNU General Public License along with
+* this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "socfpga_cyclone5.dtsi"
+
+/ {
+	model = "Terasic DE10-Nano";
+	compatible = "altr,socfpga-cyclone5", "altr,socfpga";
+
+	chosen {
+		bootargs = "earlyprintk";
+		stdout-path = "serial0:115200n8";
+	};
+
+	memory {
+		name = "memory";
+		device_type = "memory";
+		reg = <0x0 0x40000000>; /* 1GB */
+	};
+
+	aliases {
+		ethernet0 = &gmac1;
+	};
+
+	regulator_3_3v: 3-3-v-regulator {
+		compatible = "regulator-fixed";
+		regulator-name = "3.3V";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+	};
+
+	leds {
+		compatible = "gpio-leds";
+		hps0 {
+			label = "hps_led0";
+			gpios = <&portb 24 0>;
+			linux,default-trigger = "heartbeat";
+		};
+	};
+
+	keys {
+		compatible = "gpio-keys";
+		hps0 {
+			label = "hps_key0";
+			gpios = <&portb 25 0>;
+			linux,code = <63>;
+			debounce-interval = <50>;
+		};
+	};
+
+	sound {
+		compatible = "opencores,hsynthpcm5102-audio";
+		i2s-controller = <&i2s>;
+		audio-codec = <&hsynthpcm5102_codec>;
+	};
+
+	clk48: clk48 {
+		compatible = "fixed-clock";
+		#clock-cells = <0>;
+		clock-frequency  = <24576000>;
+		clock-output-names = "clk48";
+	};
+
+	clk44: clk44 {
+		compatible = "fixed-clock";
+		#clock-cells = <0>;
+		clock-frequency  = <33868800>;
+		clock-output-names = "clk44";
+	};
+
+	i2s: i2s@0x0 {
+		#sound-dai-cells = <1>;
+		compatible = "opencores,i2s";
+		reg = <0xff200000 0x20>, <0xff200020 0x20>;
+		clocks = <&clk44>, <&clk48>;
+		clock-names = "clk44", "clk48";
+		dmas = <&pdma 0>, <&pdma 1>;
+		dma-names = "tx", "rx";
+	};
+
+	hsynthpcm5102_codec: hsynthpcm5102-codec {
+	#sound-dai-cells = <0>;
+		compatible = "holotr,hsynthpcm5102";
+		status = "okay";
+	};
+
+	bridge@0xc0000000 {
+		compatible = "altr,bridge-15.1", "simple-bus";
+		reg = <0xc0000000 0x20000000 0xff200000 0x200000>;
+		#address-cells = <0x2>;
+		#size-cells = <0x1>;
+		ranges = <0x00000001 0x00001000 0xff201000 0x00000008>,
+				<0x00000001 0x00002000 0xff202000 0x00000008>,
+				<0x00000001 0x00003000 0xff203000 0x00000010>,
+				<0x00000001 0x00004000 0xff204000 0x00000010>,
+				<0x00000001 0x00005000 0xff205000 0x00000010>,
+				<0x00000001 0x00030000 0xff230000 0x00000100>,
+				<0x00000001 0x00031000 0xff231000 0x00000080>,
+				<0x00000001 0x00040000 0xff240000 0x00010000>,
+				<0x00000001 0x00050000 0xff250000 0x00010000>;
+
+		sysid@0x100001000 {
+			compatible = "altr,sysid-15.1", "altr,sysid-1.0";
+			reg = <0x00000001 0x00001000 0x00000008>;
+			id = <0xacd51302>;
+			timestamp = <0x5929e204>;
+		};
+
+		serial@0x100002000 {
+			compatible = "altr,juart-15.1", "altr,juart-1.0";
+			reg = <0x00000001 0x00002000 0x00000008>;
+			interrupt-parent = <0x3>;
+			interrupts = <0x0 0x2a 0x4>;
+			clocks = <0x2>;
+		};
+
+		gpio@0x100003000 {
+			compatible = "altr,pio-15.1", "altr,pio-1.0";
+			reg = <0x00000001 0x00003000 0x00000010>;
+			altr,gpio-bank-width = <0x8>;
+			resetvalue = <0xff>;
+			#gpio-cells = <0x2>;
+			gpio-controller;
+		};
+
+		gpio@0x100004000 {
+			compatible = "altr,pio-15.1", "altr,pio-1.0";
+			reg = <0x00000001 0x00004000 0x00000010>;
+			altr,gpio-bank-width = <0x4>;
+			altr,interrupt-type = <0x3>;
+			altr,interrupt_type = <0x3>;
+			edge_type = <0x2>;
+			level_trigger = <0x0>;
+			resetvalue = <0x0>;
+			#gpio-cells = <0x2>;
+			gpio-controller;
+		};
+
+		gpio@0x100005000 {
+			compatible = "altr,pio-15.1", "altr,pio-1.0";
+			reg = <0x00000001 0x00005000 0x00000010>;
+			altr,gpio-bank-width = <0x2>;
+			altr,interrupt-type = <0x2>;
+			altr,interrupt_type = <0x2>;
+			edge_type = <0x1>;
+			level_trigger = <0x0>;
+			resetvalue = <0x0>;
+			#gpio-cells = <0x2>;
+			gpio-controller;
+		};
+
+		ilc@0x100030000 {
+			compatible = "altr,altera_ilc-15.1", "altr,ilc-1.0";
+			reg = <0x00000001 0x00030000 0x00000100>;
+			interrupt-controller;
+			#interrupt-cells = <0x1>;
+			altr,sw-fifo-depth = <0x20>;
+		};
+
+		vip@0x100031000 {
+			compatible = "altr,vip-frame-buffer-ii-2.0";
+			reg = <0x00000001 0x00031000 0x00000080>;
+			max-width = <1920>;
+			max-height = <1080>;
+			bits-per-color = <0x8>;
+			colors-per-beat = <0x4>;
+			beats-per-pixel = <0x1>;
+			mem-word-width = <0x80>;
+		};
+
+		uio-socfpg0@0x100040000 {
+			compatible = "generic-uio,ui_pdrv";
+			reg = <0x00000001 0x00040000 0x00010000>;
+			interrupt-parent = <0x2>;
+			interrupts = <0 43 1>;
+			address_width = <14>;
+			data_width = <32>;
+		};
+
+		socmidi@0x100050000 {
+			compatible = "holotr,socsynth-midi";
+			reg = <0x00000001 0x00050000 0x00010000>;
+			interrupt-parent = <0x2>;
+/*			interrupts = <0 44 4>;*/
+			address_width = <3>;   /* embeddedsw.dts.params.address_width type NUMBER */
+			data_width = <8>;      /* embeddedsw.dts.params.data_width type NUMBER */
+		};
+	};
+};
+
+&gmac1 {
+	status = "okay";
+	phy-mode = "rgmii";
+
+	txd0-skew-ps = <0>; /* -420ps */
+	txd1-skew-ps = <0>; /* -420ps */
+	txd2-skew-ps = <0>; /* -420ps */
+	txd3-skew-ps = <0>; /* -420ps */
+	rxd0-skew-ps = <420>; /* 0ps */
+	rxd1-skew-ps = <420>; /* 0ps */
+	rxd2-skew-ps = <420>; /* 0ps */
+	rxd3-skew-ps = <420>; /* 0ps */
+	txen-skew-ps = <0>; /* -420ps */
+	txc-skew-ps = <1860>; /* 960ps */
+	rxdv-skew-ps = <420>; /* 0ps */
+	rxc-skew-ps = <1680>; /* 780ps */
+
+	max-frame-size = <3800>;
+};
+
+&gpio0 {
+	status = "okay";
+};
+
+&gpio1 {
+	status = "okay";
+};
+
+&gpio2 {
+	status = "okay";
+};
+
+&i2c0 {
+	status = "okay";
+	speed-mode = <0>;
+
+	adxl345: adxl345@0 {
+		compatible = "adi,adxl34x";
+		reg = <0x53>;
+
+		interrupt-parent = <&portc>;
+		interrupts = <3 2>;
+	};
+};
+
+&mmc0 {
+	vmmc-supply = <&regulator_3_3v>;
+	vqmmc-supply = <&regulator_3_3v>;
+	status = "okay";
+};
+
+&uart0 {
+	status = "okay";
+};
+
+&usb1 {
+	status = "okay";
+};
diff --git a/arch/arm/configs/socfpga_defconfig b/arch/arm/configs/socfpga_defconfig
index d090fe7cd7c5..25f92bd18920 100644
--- a/arch/arm/configs/socfpga_defconfig
+++ b/arch/arm/configs/socfpga_defconfig
@@ -311,6 +311,7 @@ CONFIG_SND_VIRMIDI=m
 CONFIG_SND_SOC_DE1_WM8731_HSYNTH=m
 CONFIG_SND_SOC_HSYNTH_MIDI=m
 CONFIG_SND_SOC_PCM5102A=m
+CONFIG_SND_SOC_PCM5102_HSYNTH=m
 CONFIG_FPGADMA=m
 CONFIG_REGMAP_I2C=y
 CONFIG_REGMAP_SPI=y
diff --git a/sound/soc/codecs/Kconfig b/sound/soc/codecs/Kconfig
index 49e8c241583d..616211318a2d 100644
--- a/sound/soc/codecs/Kconfig
+++ b/sound/soc/codecs/Kconfig
@@ -73,6 +73,7 @@ config SND_SOC_ALL_CODECS
 	select SND_SOC_GTM601
 	select SND_SOC_HDAC_HDMI
 	select SND_SOC_HSYNTH7002
+	select SND_SOC_HSYNTHPCM5102
 	select SND_SOC_ICS43432
 	select SND_SOC_INNO_RK3036
 	select SND_SOC_ISABELLE if I2C
@@ -514,8 +515,10 @@ config SND_SOC_HDMI_CODEC
 	select HDMI
 
 config SND_SOC_HSYNTH7002
-	tristate "Dummy Soc synthesizer codec-driver driver"
+	tristate "Dummy Soc synthesizer codec-driver"
 
+config SND_SOC_HSYNTHPCM5102
+	tristate "Pihat Hsynth Soc synthesizer codec-driver"
 
 config SND_SOC_ES8328
 	tristate "Everest Semi ES8328 CODEC"
diff --git a/sound/soc/codecs/Makefile b/sound/soc/codecs/Makefile
index be562a487dd2..2c4c3f5d7cb1 100644
--- a/sound/soc/codecs/Makefile
+++ b/sound/soc/codecs/Makefile
@@ -67,6 +67,7 @@ snd-soc-es8328-spi-objs := es8328-spi.o
 snd-soc-gtm601-objs := gtm601.o
 snd-soc-hdac-hdmi-objs := hdac_hdmi.o
 snd-soc-hsynth7002-objs := hsynth7002.o
+snd-soc-hsynthpcm5102-objs := hsynthpcm5102.o
 snd-soc-ics43432-objs := ics43432.o
 snd-soc-inno-rk3036-objs := inno_rk3036.o
 snd-soc-isabelle-objs := isabelle.o
@@ -293,6 +294,7 @@ obj-$(CONFIG_SND_SOC_ES8328_SPI)+= snd-soc-es8328-spi.o
 obj-$(CONFIG_SND_SOC_GTM601)    += snd-soc-gtm601.o
 obj-$(CONFIG_SND_SOC_HDAC_HDMI) += snd-soc-hdac-hdmi.o
 obj-$(CONFIG_SND_SOC_HSYNTH7002)+= snd-soc-hsynth7002.o
+obj-$(CONFIG_SND_SOC_HSYNTHPCM5102)+= snd-soc-hsynthpcm5102.o
 obj-$(CONFIG_SND_SOC_ICS43432)	+= snd-soc-ics43432.o
 obj-$(CONFIG_SND_SOC_INNO_RK3036)	+= snd-soc-inno-rk3036.o
 obj-$(CONFIG_SND_SOC_ISABELLE)	+= snd-soc-isabelle.o
diff --git a/sound/soc/codecs/hsynthpcm5102.c b/sound/soc/codecs/hsynthpcm5102.c
new file mode 100644
index 000000000000..dd97160ac437
--- /dev/null
+++ b/sound/soc/codecs/hsynthpcm5102.c
@@ -0,0 +1,124 @@
+/*
+* HSYNTH7002 Soc Synthesizer dummy codec driver
+*
+* Copyright 2017 Holotronic
+*  Michael Brown (the-snowwhite) <producer@holotronic.dk>
+*  based on hsynth7002.c
+*
+* Licensed under the GPL-2.
+*/
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+
+#include <sound/soc.h>
+
+static const struct snd_soc_dapm_widget hsynthpcm5102_widgets[] = {
+    SND_SOC_DAPM_OUTPUT("PCMOUT"),
+    SND_SOC_DAPM_INPUT("HSYNTH"),
+};
+
+static const struct snd_soc_dapm_route hsynthpcm5102_routes[] = {
+	{ "Playback", NULL, "PCMOUT" },
+    { "Capture", NULL, "HSYNTH" },
+};
+
+static int hsynthpcm5102_set_dai_fmt(struct snd_soc_dai *dai, unsigned int fmt)
+{
+    switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
+    case SND_SOC_DAIFMT_CBS_CFS:
+        break;
+    default:
+        return -EINVAL;
+    }
+
+    switch (fmt & SND_SOC_DAIFMT_INV_MASK) {
+    case SND_SOC_DAIFMT_NB_NF:
+        break;
+    default:
+        return -EINVAL;
+    }
+
+    switch (fmt & SND_SOC_DAIFMT_FORMAT_MASK) {
+    case SND_SOC_DAIFMT_I2S:
+    case SND_SOC_DAIFMT_DSP_A:
+        break;
+    default:
+        return -EINVAL;
+    }
+
+    return 0;
+}
+
+static const struct snd_soc_dai_ops hsynthpcm5102_dai_ops = {
+    .set_fmt = hsynthpcm5102_set_dai_fmt,
+};
+
+static struct snd_soc_dai_driver hsynthpcm5102_dai = {
+    .name = "hsynthpcm5102-hifi",
+    .playback = {
+        .stream_name = "Playback",
+        .channels_min = 2,
+        .channels_max = 2,
+        .rates = SNDRV_PCM_RATE_8000_192000,
+        .formats = SNDRV_PCM_FMTBIT_S16_LE |
+            SNDRV_PCM_FMTBIT_S24_LE |
+            SNDRV_PCM_FMTBIT_S32_LE,
+    },
+    .capture = {
+        .stream_name = "Capture",
+        .channels_min = 2,
+        .channels_max = 2,
+        .rates = SNDRV_PCM_RATE_8000_192000,
+        .formats = SNDRV_PCM_FMTBIT_S16_LE |
+            SNDRV_PCM_FMTBIT_S24_LE |
+            SNDRV_PCM_FMTBIT_S32_LE,
+        .sig_bits = 20,
+    },
+    .ops = &hsynthpcm5102_dai_ops,
+};
+
+static const struct snd_soc_codec_driver hsynthpcm5102_codec_driver = {
+    .component_driver = {
+        .dapm_widgets = hsynthpcm5102_widgets,
+        .num_dapm_widgets = ARRAY_SIZE(hsynthpcm5102_widgets),
+        .dapm_routes = hsynthpcm5102_routes,
+        .num_dapm_routes = ARRAY_SIZE(hsynthpcm5102_routes),
+    },
+};
+
+static int hsynthpcm5102_probe(struct platform_device *pdev)
+{
+    return snd_soc_register_codec(&pdev->dev, &hsynthpcm5102_codec_driver,
+            &hsynthpcm5102_dai, 1);
+}
+
+static int hsynthpcm5102_remove(struct platform_device *pdev)
+{
+    snd_soc_unregister_codec(&pdev->dev);
+    return 0;
+}
+
+//#ifdef CONFIG_OF
+static const struct of_device_id hsynthpcm5102_dt_ids[] = {
+    { .compatible = "holotr,hsynthpcm5102", },
+    { }
+};
+MODULE_DEVICE_TABLE(of, hsynthpcm5102_dt_ids);
+//#endif
+
+static struct platform_driver hsynthpcm5102_driver = {
+    .driver = {
+        .name = "hsynthpcm5102",
+        .of_match_table	= of_match_ptr(hsynthpcm5102_dt_ids),
+    },
+    .probe = hsynthpcm5102_probe,
+    .remove = hsynthpcm5102_remove,
+};
+module_platform_driver(hsynthpcm5102_driver);
+
+MODULE_AUTHOR("Michael Brown <producer@holotronic.dk>");
+MODULE_DESCRIPTION("HSYNTH7002 Dummy Soc synthesizer codec-driver driver");
+MODULE_LICENSE("GPL v2");
diff --git a/sound/soc/socsynth/Kconfig b/sound/soc/socsynth/Kconfig
index 83cc38697b9e..5d71a4ee1f62 100644
--- a/sound/soc/socsynth/Kconfig
+++ b/sound/soc/socsynth/Kconfig
@@ -27,5 +27,10 @@ config SND_SOC_DE1_WM8731_HSYNTH
 
 config SND_SOC_HSYNTH_MIDI
        tristate "Holosynth MIDI support"
-       select SND_RAWMIDI
+
+config SND_SOC_PCM5102_HSYNTH
+       tristate "DE10-Nano-PiDac/Holosynth audio support"
+       select SND_SOC_HSYNTHPCM5102
+       select SND_SOC_OC_I2S
+       select SND_SOC_GENERIC_DMAENGINE_PCM
        select REGMAP_MMIO
diff --git a/sound/soc/socsynth/Makefile b/sound/soc/socsynth/Makefile
index aa55f564c844..2043f43d0400 100644
--- a/sound/soc/socsynth/Makefile
+++ b/sound/soc/socsynth/Makefile
@@ -9,3 +9,6 @@ obj-$(CONFIG_SND_SOC_HSYNTHDMA) += snd-soc-hsynthdma.o
 
 snd-soc-hsynth-midi-objs := hsynth-midi.o
 obj-$(CONFIG_SND_SOC_HSYNTH_MIDI) += snd-soc-hsynth-midi.o
+
+snd-pcm5102-hsynth-objs := pcm5102-hsynth.o
+obj-$(CONFIG_SND_SOC_PCM5102_HSYNTH) += snd-pcm5102-hsynth.o
diff --git a/sound/soc/socsynth/pcm5102-hsynth.c b/sound/soc/socsynth/pcm5102-hsynth.c
new file mode 100644
index 000000000000..2d56f0b83f5a
--- /dev/null
+++ b/sound/soc/socsynth/pcm5102-hsynth.c
@@ -0,0 +1,438 @@
+/*
+* de1-soc-wm8731 -- SoC audio for Terasic DE1-SoC board
+* Author: B. Steinsbo <bsteinsbo@gmail.com>
+*
+* Based on sam9g20_wm8731 by
+* Sedji Gaouaou <sedji.gaouaou@atmel.com>
+*
+* Licensed under the GPL-2.
+*/
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/clk.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
+#include <linux/uaccess.h>
+#include <linux/ioport.h>
+#include <linux/io.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+// #include <sound/seq_kernel.h>
+// #include <sound/rawmidi.h>
+#include <sound/initval.h>
+
+// #define SOCSYNTHMIDI_LOG_PREFIX "socsynthmidi: "
+// #define midi_ins 0
+// #define midi_outs 1
+//
+// #define MIDIREG_BASE 0xff200000
+// #define MIDIREG_SIZE PAGE_SIZE
+// #define MIDIREG_OFFSET 0x50000
+
+//#define WM8731_SYSCLK_XTAL 1
+//#define WM8731_SYSCLK_MCLK 2
+#define MCLK_RATE_48K 12288000 /* fs*256 */
+#define MCLK_RATE_44K 16934400 /* fs*384 */
+
+// #define printe(...) pr_err(SOCSYNTHMIDI_LOG_PREFIX __VA_ARGS__)
+//
+// static int snd_socmidi_open(struct snd_rawmidi_substream *substream);
+// static int snd_socmidi_close(struct snd_rawmidi_substream *substream);
+// static int hmidi_card_probe(struct snd_soc_card *card);
+// static int hmidi_card_remove(struct snd_soc_card *card);
+// static void snd_socmidi_transmit(unsigned char data);
+// static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int);
+// static int hsound_midi_init(struct snd_card *card);
+//
+// void *midireg_mem;
+//
+// static int snd_socmidi_open(struct snd_rawmidi_substream *substream)
+// {
+//     return 0;
+// }
+//
+// static int snd_socmidi_close(struct snd_rawmidi_substream *substream)
+// {
+//     return 0;
+// }
+//
+// static int hmidi_card_probe(struct snd_soc_card *card)
+// {
+//     int err;
+//
+//     err = hsound_midi_init(card->snd_card);
+//
+//     if (err < 0) {
+//         //		dev_dbg(&pdev->dev,"hsound_midi_init failed: %d\n", err);
+//         return err;
+//     }
+//
+//     return 0;
+// }
+//
+// static int hmidi_card_remove(struct snd_soc_card *card)
+// {
+//     return 0;
+// }
+//
+// static void snd_socmidi_transmit(unsigned char data){
+//
+//     iowrite8(data, midireg_mem);
+//
+// }
+//
+// static void snd_socmidi_output_trigger(struct snd_rawmidi_substream *substream, int up) {
+//
+//     if (!up)
+//         return;
+//
+//     while (1) {
+//         unsigned char data;
+//         if (snd_rawmidi_transmit(substream, &data, 1) != 1)
+//             break; /* no more data */
+//         snd_socmidi_transmit(data);
+//     }
+// }
+//
+// static struct snd_rawmidi *g_rmidi;
+//
+// static struct snd_rawmidi_ops snd_socmidi_output_ops = {
+//     .open = snd_socmidi_open,
+//     .close = snd_socmidi_close,
+//     .trigger = snd_socmidi_output_trigger,
+// };
+//
+// static void pisnd_get_port_info(struct snd_rawmidi *rmidi, int number, struct snd_seq_port_info *seq_port_info)
+// {
+//     seq_port_info->type =
+//     SNDRV_SEQ_PORT_TYPE_MIDI_GENERIC |
+//     SNDRV_SEQ_PORT_TYPE_HARDWARE |
+//     SNDRV_SEQ_PORT_TYPE_PORT;
+//     seq_port_info->midi_voices = 0;
+// }
+//
+// static struct snd_rawmidi_global_ops hsnd_global_ops = {.get_port_info = pisnd_get_port_info, };
+//
+// static int hsound_midi_init(struct snd_card *card)
+// {
+//     int err;
+//     struct resource *res;
+//
+//     err = snd_rawmidi_new(card, "SocMIDI", 0, midi_outs, midi_ins, &g_rmidi);
+//
+//     if (err < 0) {
+//         printe("snd_rawmidi_new failed: %d\n", err);
+//         return err;
+//     }
+//
+//     strcpy(g_rmidi->name, "Holosynth MIDI ");
+//
+//     g_rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT;
+//     // rmidi->info_flags = SNDRV_RAWMIDI_INFO_OUTPUT |
+//     //                     SNDRV_RAWMIDI_INFO_INPUT |
+//     //                     SNDRV_RAWMIDI_INFO_DUPLEX;
+//
+//     g_rmidi->ops = &hsnd_global_ops;
+//
+//     g_rmidi->private_data = (void *)0;
+//
+//     snd_rawmidi_set_ops(g_rmidi, SNDRV_RAWMIDI_STREAM_OUTPUT, &snd_socmidi_output_ops);
+//     //    snd_rawmidi_set_ops(rmidi, SNDRV_RAWMIDI_STREAM_INPUT, &snd_socmidi_input_ops);
+//
+//     res = request_mem_region((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE, "MIDIREG");
+//     if (res == NULL) {
+//         return -EBUSY;
+//     }
+//
+//     midireg_mem = ioremap((MIDIREG_BASE + MIDIREG_OFFSET), MIDIREG_SIZE);
+//     if (midireg_mem == NULL) {
+//         release_mem_region(MIDIREG_BASE, MIDIREG_SIZE);
+//         return -EFAULT;
+//     }
+//
+//     return 0;
+// }
+
+static unsigned int i2c_mux_gpio;
+
+static int de10soc_hw_params(struct snd_pcm_substream *substream,
+    struct snd_pcm_hw_params *params)
+{
+    struct snd_soc_pcm_runtime *rtd = substream->private_data;
+//    struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct device *dev = rtd->card->dev;
+    unsigned int mclk_freq;
+//    int ret;
+
+    if ((params_rate(params) % 44100) == 0) {
+        mclk_freq = MCLK_RATE_44K;
+    } else if ((params_rate(params) % 48000) == 0) {
+        mclk_freq = MCLK_RATE_48K;
+    } else
+        return -EINVAL;
+
+    /* set codec mclk configuration */
+//     ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+//         mclk_freq, SND_SOC_CLOCK_OUT);
+//     if (ret < 0)
+//         return ret;
+
+    dev_dbg(dev, "hw_params: mclk_freq=%d\n", mclk_freq);
+    return 0;
+}
+
+// static void de10soc_shutdown(struct snd_pcm_substream *substream)
+// {
+//     struct snd_soc_pcm_runtime *rtd = substream->private_data;
+//     struct snd_soc_dai *codec_dai = rtd->codec_dai;
+//     struct device *dev = rtd->card->dev;
+//     int ret;
+//
+//     dev_dbg(dev, "shutdown\n");
+//     ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+//         0, SND_SOC_CLOCK_OUT);
+//     if (ret < 0) {
+//         dev_err(dev, "Failed to reset WM8731 SYSCLK: %d\n", ret);
+//     }
+// }
+
+static struct snd_soc_ops de10soc_ops = {
+    // .startup
+//    .shutdown = de10soc_shutdown,
+    .hw_params = de10soc_hw_params,
+    // .hw_free
+    // .prepare
+    // .trigger
+};
+
+static const struct snd_soc_dapm_widget de10soc_dapm_widgets[] = {
+    SND_SOC_DAPM_LINE("Line Out", NULL),
+    SND_SOC_DAPM_LINE("Hsynth in", NULL),
+};
+
+static const struct snd_soc_dapm_route intercon[] = {
+    {"Line Out", NULL, "PCMOUT"},
+    {"HSYNTH", NULL, "Hsynth in"},
+};
+
+static int de10soc_hsynthpcm5102_init(struct snd_soc_pcm_runtime *rtd)
+{
+    struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+    struct device *dev = rtd->card->dev;
+    unsigned int fmt;
+    int ret;
+
+    dev_dbg(dev, "init\n");
+
+    fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+        SND_SOC_DAIFMT_CBS_CFS;
+
+    /* set cpu DAI configuration */
+    ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
+    if (ret < 0)
+        return ret;
+
+    /* set codec DAI configuration */
+    ret = snd_soc_dai_set_fmt(codec_dai, fmt);
+    if (ret < 0)
+        return ret;
+
+    /* Don't let codec constraints interfere */
+//     ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_MCLK,
+//         0, SND_SOC_CLOCK_OUT);
+//     if (ret < 0) {
+//         dev_err(dev, "Failed to set WM8731 SYSCLK: %d\n", ret);
+//         return ret;
+//     }
+
+    return 0;
+}
+
+// static int soc_hsynth_init(struct snd_soc_pcm_runtime *rtd)
+// {
+//     struct snd_soc_dai *codec_dai = rtd->codec_dai;
+//     struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+//     struct device *dev = rtd->card->dev;
+//     unsigned int fmt;
+//     int ret;
+//
+//     dev_dbg(dev, "init\n");
+//
+//     fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+//     SND_SOC_DAIFMT_CBS_CFS;
+//
+//     /* set cpu DAI configuration */
+//     ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
+//     if (ret < 0)
+//         return ret;
+//
+//     /* set codec DAI configuration */
+//     ret = snd_soc_dai_set_fmt(codec_dai, fmt);
+//     if (ret < 0)
+//         return ret;
+//
+//     return 0;
+// }
+
+static struct snd_soc_dai_link de10soc_dai = {
+//	{ /* Primary DAI i/f */
+    .name = "SSND0",
+    .stream_name = "HSYNTH PCM5102",
+    .cpu_dai_name = "ff200000.i2s",
+    .codec_dai_name = "hsynthpcm5102-hifi",
+    .init = de10soc_hsynthpcm5102_init,
+    .platform_name = "de10soc",
+    .codec_name = "hsynthpcm5102.hsynth",
+    .ops = &de10soc_ops,
+// 	}, { /* Sec_Fifo Playback i/f */
+//     .name = "SSND1",
+//     .stream_name = "HSYNTH PCM",
+//     .cpu_dai_name = "ff200000.dmalink",
+//     .codec_dai_name = "hsynth7002-hifi",
+//     .init = soc_hsynth_init,
+//     .platform_name = "de10soc",
+//     .codec_name = "hsynth7002.hsynth",
+//	},
+};
+
+static struct snd_soc_card snd_soc_de10soc = {
+    .name = "DE10SND",
+    .owner = THIS_MODULE,
+    .dai_link = &de10soc_dai,
+//    .num_links = ARRAY_SIZE(de10soc_dai),
+    .num_links = 1,
+
+//     .probe        = hmidi_card_probe,
+//     .remove       = hmidi_card_remove,
+
+    .dapm_widgets = de10soc_dapm_widgets,
+    .num_dapm_widgets = ARRAY_SIZE(de10soc_dapm_widgets),
+    .dapm_routes = intercon,
+    .num_dapm_routes = ARRAY_SIZE(intercon),
+};
+
+static int de10soc_audio_probe(struct platform_device *pdev)
+{
+    struct device_node *np = pdev->dev.of_node;
+    struct device_node *codec_np, *cpu_np;
+    struct snd_soc_card *card = &snd_soc_de10soc;
+    int ret;
+
+    if (!np) {
+        return -ENODEV;
+    }
+
+    card->dev = &pdev->dev;
+
+    /* I2C bus is muxed between HPS and FPGA. Set mux to HPS */
+//     i2c_mux_gpio = of_get_named_gpio(np, "i2c-mux-gpio", 0);
+//     if (gpio_is_valid(i2c_mux_gpio)) {
+//         ret = devm_gpio_request_one(&pdev->dev,
+//             i2c_mux_gpio, GPIOF_OUT_INIT_LOW, "I2C_MUX");
+//         if (ret) {
+//             dev_err(&pdev->dev,
+//                 "Failed to request GPIO_%d for i2c_mux: %d\n",
+//                 i2c_mux_gpio, ret);
+//             return ret;
+//         }
+//         gpio_set_value(i2c_mux_gpio, 1);
+//     }
+
+    /* Parse codec1 info */
+    de10soc_dai.codec_name = NULL;
+    codec_np = of_parse_phandle(np, "audio-codec", 0);
+    if (!codec_np) {
+        dev_err(&pdev->dev, "audio-codec info missing\n");
+        return -EINVAL;
+    }
+    de10soc_dai.codec_of_node = codec_np;
+
+    /* Parse dai and platform info */
+    de10soc_dai.cpu_dai_name = NULL;
+    de10soc_dai.platform_name = NULL;
+    cpu_np = of_parse_phandle(np, "i2s-controller", 0);
+    if (!cpu_np) {
+        dev_err(&pdev->dev, "i2s dai1 and pcm info missing\n");
+        return -EINVAL;
+    }
+
+    de10soc_dai.cpu_of_node = cpu_np;
+    de10soc_dai.platform_of_node = cpu_np;
+
+    of_node_put(codec_np);
+    of_node_put(cpu_np);
+
+    /* Parse codec2 info */
+//     de10soc_dai[1].codec_name = NULL;
+//     codec_np = of_parse_phandle(np, "synth-codec", 0);
+//     if (!codec_np) {
+//         dev_err(&pdev->dev, "synth-codec info missing\n");
+//         return -EINVAL;
+//     }
+//     de10soc_dai[1].codec_of_node = codec_np;
+//
+//     /* Parse dai and platform info */
+//     de10soc_dai[1].cpu_dai_name = NULL;
+//     de10soc_dai[1].platform_name = NULL;
+//     cpu_np = of_parse_phandle(np, "dmalink-controller", 0);
+//     if (!cpu_np) {
+//         dev_err(&pdev->dev, "dmalink-controller info missing\n");
+//         return -EINVAL;
+//     }
+//
+//     de10soc_dai[1].cpu_of_node = cpu_np;
+//     de10soc_dai[1].platform_of_node = cpu_np;
+//
+//     of_node_put(codec_np);
+//     of_node_put(cpu_np);
+//
+
+    ret = snd_soc_register_card(card);
+    if (ret) {
+        dev_err(&pdev->dev, "snd_soc_register_card() failed\n");
+    }
+
+    return ret;
+}
+
+static int de10soc_audio_remove(struct platform_device *pdev)
+{
+    struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+    if (gpio_is_valid(i2c_mux_gpio))
+        devm_gpio_free(&pdev->dev, i2c_mux_gpio);
+
+    snd_soc_unregister_card(card);
+
+    return 0;
+}
+
+static const struct of_device_id hsynthpcm5102_dt_ids[] = {
+    { .compatible = "opencores,hsynthpcm5102-audio", },
+    { }
+};
+MODULE_DEVICE_TABLE(of, hsynthpcm5102_dt_ids);
+
+static struct platform_driver de10soc_audio_driver = {
+    .driver = {
+        .name	= "hsynth-audio",
+        .owner	= THIS_MODULE,
+        .of_match_table = of_match_ptr(hsynthpcm5102_dt_ids),
+    },
+    .probe	= de10soc_audio_probe,
+    .remove	= de10soc_audio_remove,
+};
+
+module_platform_driver(de10soc_audio_driver);
+
+/* Module information */
+MODULE_AUTHOR("Bjarne Steinsbo <bsteinsbo@gmail.com>");
+MODULE_DESCRIPTION("ALSA SoC DE10-SoC_PWM5102");
+MODULE_LICENSE("GPL");
-- 
2.17.1

