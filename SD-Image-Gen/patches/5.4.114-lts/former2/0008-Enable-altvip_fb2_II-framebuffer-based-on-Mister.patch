From 1ea220f69739e0430e1e4552d54156718ee2a71c Mon Sep 17 00:00:00 2001
From: Holotronic <producer@holotronic.dk>
Date: Wed, 21 Jul 2021 22:12:26 +0200
Subject: [PATCH 08/10] Enable altvip_fb2_II framebuffer based on Mister

Signed-off-by: Holotronic <producer@holotronic.dk>
---
 arch/arm/Kconfig                   |   1 +
 arch/arm/configs/socfpga_defconfig | 114 ++++++++++++-
 drivers/video/fbdev/Kconfig        |  10 ++
 drivers/video/fbdev/Makefile       |   1 +
 drivers/video/fbdev/altvipfbii.c   | 260 +++++++++++++++++++++++++++++
 5 files changed, 384 insertions(+), 2 deletions(-)
 create mode 100644 drivers/video/fbdev/altvipfbii.c

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 9aa88715f196..cc22f79083a3 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -1606,6 +1606,7 @@ config ARM_MODULE_PLTS
 
 config FORCE_MAX_ZONEORDER
 	int "Maximum zone order"
+	default "13" if ARCH_SOCFPGA
 	default "12" if SOC_AM33XX
 	default "9" if SA1111 || ARCH_EFM32
 	default "11"
diff --git a/arch/arm/configs/socfpga_defconfig b/arch/arm/configs/socfpga_defconfig
index 897eee544d8d..0d0b7617f50b 100644
--- a/arch/arm/configs/socfpga_defconfig
+++ b/arch/arm/configs/socfpga_defconfig
@@ -124,7 +124,14 @@ CONFIG_MFD_STMPE=y
 CONFIG_REGULATOR=y
 CONFIG_REGULATOR_FIXED_VOLTAGE=y
 CONFIG_FB=y
-CONFIG_FB_ALTERA_VIP_FB2_PLAT=m
+CONFIG_FB_CMDLINE=y
+CONFIG_FB_NOTIFY=y
+CONFIG_FB_CFB_FILLRECT=y
+CONFIG_FB_CFB_COPYAREA=y
+CONFIG_FB_CFB_IMAGEBLIT=y
+CONFIG_FB_ALTERA_VIP=y
+CONFIG_FB_ALTERA_VIP_II=y
+CONFIG_FB_ALTERA_VIP_FB2_PLAT=y
 CONFIG_FRAMEBUFFER_CONSOLE=y
 CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY=y
 CONFIG_USB=y
@@ -182,7 +189,7 @@ CONFIG_NFSD_V4=y
 CONFIG_NLS_CODEPAGE_437=y
 CONFIG_NLS_ISO8859_1=y
 CONFIG_PRINTK_TIME=y
-CONFIG_DEBUG_INFO=y
+CONFIG_DEBUG_INFO=n
 CONFIG_MAGIC_SYSRQ=y
 CONFIG_DETECT_HUNG_TASK=y
 # CONFIG_SCHED_DEBUG is not set
@@ -190,3 +197,106 @@ CONFIG_FUNCTION_TRACER=y
 CONFIG_DEBUG_USER=y
 CONFIG_ISCSI_TCP=m
 CONFIG_ISCSI_TARGET=m
+CONFIG_FIX_EARLYCON_MEM=y
+CONFIG_ARM_HEAVY_MB=y
+CONFIG_ARCH_SUPPORTS_BIG_ENDIAN=y
+CONFIG_DMA_SHARED_BUFFER=y
+CONFIG_FORCE_MAX_ZONEORDER=13
+CONFIG_CMA=y
+CONFIG_DMA_CMA=y
+CONFIG_MEMORY_ISOLATION=y
+CONFIG_CMA_DEBUG=y
+CONFIG_CMA_DEBUGFS=y
+CONFIG_CMA_AREAS=7
+CONFIG_GENERIC_EARLY_IOREMAP=y
+CONFIG_FRAME_VECTOR=y
+CONFIG_CMA_SIZE_MBYTES=512
+CONFIG_CMA_SIZE_SEL_MBYTES=y
+CONFIG_CMA_ALIGNMENT=8
+CONFIG_VT_HW_CONSOLE_BINDING=y
+CONFIG_MEDIA_SUPPORT=y
+CONFIG_MEDIA_SUPPORT=y
+CONFIG_MEDIA_CAMERA_SUPPORT=y
+CONFIG_MEDIA_CONTROLLER=y
+CONFIG_MEDIA_CONTROLLER_DVB=y
+CONFIG_VIDEO_DEV=y
+CONFIG_VIDEO_V4L2_SUBDEV_API=y
+CONFIG_VIDEO_V4L2=y
+CONFIG_VIDEOBUF_GEN=y
+CONFIG_VIDEOBUF2_CORE=y
+CONFIG_VIDEOBUF2_MEMOPS=y
+CONFIG_VIDEOBUF2_VMALLOC=y
+CONFIG_MEDIA_USB_SUPPORT=y
+CONFIG_MEDIA_USB_SUPPORT=y
+CONFIG_USB_VIDEO_CLASS=y
+CONFIG_USB_VIDEO_CLASS_INPUT_EVDEV=y
+CONFIG_USB_GSPCA=y
+CONFIG_USB_M5602=y
+CONFIG_USB_STV06XX=y
+CONFIG_USB_GL860=y
+CONFIG_USB_GSPCA_BENQ=y
+CONFIG_USB_GSPCA_CONEX=y
+CONFIG_USB_GSPCA_CPIA1=y
+CONFIG_USB_GSPCA_DTCS033=y
+CONFIG_USB_GSPCA_ETOMS=y
+CONFIG_USB_GSPCA_FINEPIX=y
+CONFIG_USB_GSPCA_JEILINJ=y
+CONFIG_USB_GSPCA_JL2005BCD=y
+CONFIG_USB_GSPCA_KINECT=y
+CONFIG_USB_GSPCA_KONICA=y
+CONFIG_USB_GSPCA_MARS=y
+CONFIG_USB_GSPCA_MR97310A=y
+CONFIG_USB_GSPCA_NW80X=y
+CONFIG_USB_GSPCA_OV519=y
+CONFIG_USB_GSPCA_OV534=y
+CONFIG_USB_GSPCA_OV534_9=y
+CONFIG_USB_GSPCA_PAC207=y
+CONFIG_USB_GSPCA_PAC7302=y
+CONFIG_USB_GSPCA_PAC7311=y
+CONFIG_USB_GSPCA_SE401=y
+CONFIG_USB_GSPCA_SN9C2028=y
+CONFIG_USB_GSPCA_SN9C20X=y
+CONFIG_USB_GSPCA_SONIXB=y
+CONFIG_USB_GSPCA_SONIXJ=y
+CONFIG_USB_GSPCA_SPCA500=y
+CONFIG_USB_GSPCA_SPCA501=y
+CONFIG_USB_GSPCA_SPCA505=y
+CONFIG_USB_GSPCA_SPCA506=y
+CONFIG_USB_GSPCA_SPCA508=y
+CONFIG_USB_GSPCA_SPCA561=y
+CONFIG_USB_GSPCA_SPCA1528=y
+CONFIG_USB_GSPCA_SQ905=y
+CONFIG_USB_GSPCA_SQ905C=y
+CONFIG_USB_GSPCA_SQ930X=y
+CONFIG_USB_GSPCA_STK014=y
+CONFIG_USB_GSPCA_STK1135=y
+CONFIG_USB_GSPCA_STV0680=y
+CONFIG_USB_GSPCA_SUNPLUS=y
+CONFIG_USB_GSPCA_T613=y
+CONFIG_USB_GSPCA_TOPRO=y
+CONFIG_USB_GSPCA_TOUPTEK=y
+CONFIG_USB_GSPCA_TV8532=y
+CONFIG_USB_GSPCA_VC032X=y
+CONFIG_USB_GSPCA_VICAM=y
+CONFIG_USB_GSPCA_XIRLINK_CIT=y
+CONFIG_USB_GSPCA_ZC3XX=y
+CONFIG_V4L_PLATFORM_DRIVERS=y
+CONFIG_SOC_CAMERA=y
+CONFIG_SOC_CAMERA_PLATFORM=y
+CONFIG_DUMMY_CONSOLE=y
+CONFIG_FRAMEBUFFER_CONSOLE=y
+CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY=y
+CONFIG_FRAMEBUFFER_CONSOLE_ROTATION=y
+CONFIG_LOGO=y
+CONFIG_LOGO_LINUX_MONO=y
+CONFIG_LOGO_LINUX_VGA16=y
+CONFIG_LOGO_LINUX_CLUT224=y
+CONFIG_MEDIA_SUBDRV_AUTOSELECT=y
+CONFIG_LIBCRC32C=y
+CONFIG_INPUT_EVDEV=y
+CONFIG_INPUT_UINPUT=y
+CONFIG_INPUT_TOUCHSCREEN=y
+CONFIG_TOUCHSCREEN_USB_COMPOSITE=y
+CONFIG_HID=y
+CONFIG_USB_HID=y
+CONFIG_HID_MULTITOUCH=y
diff --git a/drivers/video/fbdev/Kconfig b/drivers/video/fbdev/Kconfig
index 1aab0a6cceb9..00492fbd668d 100644
--- a/drivers/video/fbdev/Kconfig
+++ b/drivers/video/fbdev/Kconfig
@@ -218,6 +218,16 @@ config FB_TILEBLITTING
 
 comment "Frame buffer hardware drivers"
 	depends on FB
+ 
+config FB_ALTERA_VIP_II
+	tristate "Altera VIP II Framebuffer support"
+	depends on FB
+	select FB_CFB_FILLRECT
+	select FB_CFB_COPYAREA
+	select FB_CFB_IMAGEBLIT
+	help
+	  This driver supports the Altera Video and Image Processing(VIP)
+	  Framebuffer II
 
 config FB_ALTERA_VIP_FB2
     tristate "Altera VIP Frame Buffer II framebuffer support"
diff --git a/drivers/video/fbdev/Makefile b/drivers/video/fbdev/Makefile
index 73fa249a8e43..957c33e75c9c 100644
--- a/drivers/video/fbdev/Makefile
+++ b/drivers/video/fbdev/Makefile
@@ -11,6 +11,7 @@ obj-$(CONFIG_FB_MACMODES)      += macmodes.o
 obj-$(CONFIG_FB_WMT_GE_ROPS)   += wmt_ge_rops.o
 
 # Hardware specific drivers go first
+obj-$(CONFIG_FB_ALTERA_VIP_II)	  += altvipfbii.o
 obj-$(CONFIG_FB_ALTERA_VIP_FB2) += altvipfb2.o
 obj-$(CONFIG_FB_ALTERA_VIP_FB2_PLAT) += altvipfb2_drv.o
 altvipfb2_drv-objs := altvipfb2-plat.o altvipfb2.o
diff --git a/drivers/video/fbdev/altvipfbii.c b/drivers/video/fbdev/altvipfbii.c
new file mode 100644
index 000000000000..a80ae1a714f7
--- /dev/null
+++ b/drivers/video/fbdev/altvipfbii.c
@@ -0,0 +1,260 @@
+/*
+ *  altvipfb.c -- Altera Video and Image Processing(VIP) Frame Reader driver
+ *
+ *  This is based on a driver made by Thomas Chou <thomas@wytron.com.tw> and
+ *  Walter Goossens <waltergoossens@home.nl> This driver supports the Altera VIP
+ *  Frame Reader component.  More info on the hardware can be found in
+ *  the Altera Video and Image Processing Suite User Guide at this address
+ *  http://www.altera.com/literature/ug/ug_vip.pdf.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ */
+
+#include <linux/dma-mapping.h>
+#include <linux/fb.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+
+#define PALETTE_SIZE	256
+#define DRIVER_NAME	"altvipfbii"
+
+/* control registers */
+#define ALTVIPFB_CONTROL		0
+#define ALTVIPFB_FRAMEINFO		20
+#define ALTVIPFB_FRAMEADDR		24
+
+struct altvipfb_type;
+
+struct altvipfb_dev {
+    struct platform_device *pdev;
+    struct fb_info info;
+    struct resource *reg_res;
+    void __iomem *base;
+    u32 pseudo_palette[PALETTE_SIZE];
+};
+
+static int altvipfb_setcolreg(unsigned regno, unsigned red, unsigned green,
+                              unsigned blue, unsigned transp, struct fb_info *info)
+{
+    /*
+     *  Set a single color register. The values supplied have a 32 bit
+     *  magnitude.
+     *  Return != 0 for invalid regno.
+     */
+
+    if (regno > 255)
+        return 1;
+
+    red >>= 8;
+    green >>= 8;
+    blue >>= 8;
+
+    if (regno < 255) {
+        ((u32 *)info->pseudo_palette)[regno] =
+        ((red & 255) << 16) | ((green & 255) << 8) | (blue & 255);
+    }
+
+    return 0;
+}
+
+static struct fb_ops altvipfb_ops = {
+    .owner = THIS_MODULE,
+    .fb_fillrect = cfb_fillrect,
+    .fb_copyarea = cfb_copyarea,
+    .fb_imageblit = cfb_imageblit,
+    .fb_setcolreg = altvipfb_setcolreg,
+};
+
+static void altvipfb_start_hw(struct altvipfb_dev *fbdev)
+{
+    writel(1, fbdev->base + ALTVIPFB_CONTROL);
+    writel((fbdev->info.var.xres & 0xFFF) | ((fbdev->info.var.yres & 0xFFF) << 13), fbdev->base + ALTVIPFB_FRAMEINFO);
+    writel(fbdev->info.fix.smem_start, fbdev->base + ALTVIPFB_FRAMEADDR);
+}
+
+static void altvipfb_disable_hw(struct altvipfb_dev *fbdev)
+{
+    /* set the control register to 0 to stop streaming */
+    writel(0, fbdev->base + ALTVIPFB_CONTROL);
+}
+
+static int altvipfb_setup_fb_info(struct altvipfb_dev *fbdev)
+{
+    struct fb_info *info = &fbdev->info;
+    struct device_node *np = fbdev->pdev->dev.of_node;
+
+    int ret;
+
+    //     u32 width = readl(fbdev->base + 0x80);
+    //     u32 height = readl(fbdev->base + 0x88);
+    //     info->var.xres = (((width>>12)&0xf)*1000) + (((width>>8)&0xf)*100) + (((width>>4)&0xf)*10) + (width&0xf);
+    //     info->var.yres = (((height>>12)&0xf)*1000) + (((height>>8)&0xf)*100) + (((height>>4)&0xf)*10) + (height&0xf);
+
+    ret = of_property_read_u32(np, "max-width", &fbdev->info.var.xres);
+    if (ret) {
+        dev_err(&fbdev->pdev->dev,
+                "Missing required parameter 'max-width'");
+        return ret;
+    }
+
+    ret = of_property_read_u32(np, "max-height", &fbdev->info.var.yres);
+    if (ret) {
+        dev_err(&fbdev->pdev->dev,
+                "Missing required parameter 'max-height'");
+        return ret;
+    }
+
+    strcpy(info->fix.id, DRIVER_NAME);
+    info->fix.type = FB_TYPE_PACKED_PIXELS;
+    info->fix.visual = FB_VISUAL_TRUECOLOR;
+    info->fix.accel = FB_ACCEL_NONE;
+
+    info->fbops = &altvipfb_ops;
+    info->var.activate = FB_ACTIVATE_NOW;
+    info->var.height = -1;
+    info->var.width = -1;
+    info->var.vmode = FB_VMODE_NONINTERLACED;
+
+    info->var.xres_virtual = info->var.xres,
+    info->var.yres_virtual = info->var.yres;
+    info->var.bits_per_pixel = 32;
+
+    dev_info(&fbdev->pdev->dev, "FB width = %u, FB height = %u\n", info->var.xres, info->var.yres);
+
+    /* settings for 32bit pixels */
+    info->var.red.offset = 16;
+    info->var.red.length = 8;
+    info->var.red.msb_right = 0;
+    info->var.green.offset = 8;
+    info->var.green.length = 8;
+    info->var.green.msb_right = 0;
+    info->var.blue.offset = 0;
+    info->var.blue.length = 8;
+    info->var.blue.msb_right = 0;
+
+    info->fix.line_length = (info->var.xres *
+    (info->var.bits_per_pixel >> 3));
+    info->fix.smem_len = info->fix.line_length * info->var.yres;
+
+    info->pseudo_palette = fbdev->pseudo_palette;
+    info->flags = FBINFO_FLAG_DEFAULT;
+
+    return 0;
+}
+
+static int altvipfb_probe(struct platform_device *pdev)
+{
+    int retval;
+    void *fbmem_virt;
+    struct altvipfb_dev *fbdev;
+
+    fbdev = devm_kzalloc(&pdev->dev, sizeof(*fbdev), GFP_KERNEL);
+    if (!fbdev)
+        return -ENOMEM;
+
+    fbdev->pdev = pdev;
+    fbdev->reg_res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+    if (!fbdev->reg_res)
+        return -ENODEV;
+
+    //     fbdev->base = devm_ioremap_resource(&pdev->dev, fbdev->reg_res);
+    //     if (IS_ERR(fbdev->base)) {
+    //         dev_err(&pdev->dev, "devm_ioremap_resource failed\n");
+    //         return PTR_ERR(fbdev->base);
+    //     }
+
+    retval = altvipfb_setup_fb_info(fbdev);
+
+    fbmem_virt = dma_alloc_coherent(NULL,
+                                    fbdev->info.fix.smem_len,
+                                    (void *)&(fbdev->info.fix.smem_start),
+                                    GFP_KERNEL);
+    if (!fbmem_virt) {
+        dev_err(&pdev->dev,
+                "altvipfb: unable to allocate %d Bytes fb memory\n",
+                fbdev->info.fix.smem_len);
+        return retval;
+    }
+
+    fbdev->info.screen_base = fbmem_virt;
+
+    retval = fb_alloc_cmap(&fbdev->info.cmap, PALETTE_SIZE, 0);
+    if (retval < 0)
+        goto err_dma_free;
+
+    platform_set_drvdata(pdev, fbdev);
+
+    fbdev->base = devm_ioremap_resource(&pdev->dev, fbdev->reg_res);
+    if (IS_ERR(fbdev->base)) {
+        dev_err(&pdev->dev, "devm_ioremap_resource failed\n");
+        retval = PTR_ERR(fbdev->base);
+        goto err_dealloc_cmap;
+    }
+
+    altvipfb_start_hw(fbdev);
+
+    retval = register_framebuffer(&fbdev->info);
+    if (retval < 0)
+        goto err_dealloc_cmap;
+
+    dev_info(&pdev->dev, "fb%d: %s frame buffer device at 0x%x+0x%x\n",
+             fbdev->info.node, fbdev->info.fix.id,
+             (unsigned)fbdev->info.fix.smem_start,
+             fbdev->info.fix.smem_len);
+
+    return 0;
+
+    err_dealloc_cmap:
+    fb_dealloc_cmap(&fbdev->info.cmap);
+    err_dma_free:
+    dma_free_coherent(NULL, fbdev->info.fix.smem_len, fbmem_virt,
+                      fbdev->info.fix.smem_start);
+    return retval;
+}
+
+static int altvipfb_remove(struct platform_device *dev)
+{
+    struct altvipfb_dev *fbdev = platform_get_drvdata(dev);
+
+    if (fbdev) {
+        unregister_framebuffer(&fbdev->info);
+        fb_dealloc_cmap(&fbdev->info.cmap);
+        dma_free_coherent(NULL, fbdev->info.fix.smem_len,
+                          fbdev->info.screen_base,
+                          fbdev->info.fix.smem_start);
+        altvipfb_disable_hw(fbdev);
+    }
+    return 0;
+}
+
+
+static struct of_device_id altvipfb_match[] = {
+    { .compatible = "altr,vip-frame-buffer-ii-2.0" },
+    {},
+};
+MODULE_DEVICE_TABLE(of, altvipfb_match);
+
+static struct platform_driver altvipfb_driver = {
+    .probe = altvipfb_probe,
+    .remove = altvipfb_remove,
+    .driver = {
+        .owner = THIS_MODULE,
+        .name = DRIVER_NAME,
+        .of_match_table = altvipfb_match,
+    },
+};
+module_platform_driver(altvipfb_driver);
+
+MODULE_DESCRIPTION("Altera VIP Frame Reader framebuffer driver");
+MODULE_AUTHOR("Chris Rauer <crauer@altera.com>");
+MODULE_LICENSE("GPL v2");
-- 
2.30.2

